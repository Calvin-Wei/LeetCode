//给定一个正整数数组 nums和整数 k 。 
//
// 请找出该数组内乘积小于 k 的连续的子数组的个数。 
//
// 
//
// 示例 1: 
//
// 
//输入: nums = [10,5,2,6], k = 100
//输出: 8
//解释: 8个乘积小于100的子数组分别为: [10], [5], [2], [6], [10,5], [5,2], [2,6], [5,2,6]。
//需要注意的是 [10,5,2] 并不是乘积小于100的子数组。
// 
//
// 示例 2: 
//
// 
//输入: nums = [1,2,3], k = 0
//输出: 0 
//
// 
//
// 提示: 
//
// 
// 1 <= nums.length <= 3 * 10⁴ 
// 1 <= nums[i] <= 1000 
// 0 <= k <= 10⁶ 
// 
// Related Topics 数组 滑动窗口 👍 297 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
//高效双指针、滑动窗口
public int numSubarrayProductLessThanK(int[] nums, int k) {
        if(k<=1)
            return 0;
        int ans = 0;
        //j是滑动窗口的左侧索引边界,i是滑动窗口的右侧索引边界
        int j = 0;
        int multiple = 1;
        for (int i = 0; i < nums.length; i++) {
            //窗口正常向右侧拉伸
            multiple *= nums[i];
            //当窗口拉伸到右侧大于等于k时,则移动左侧窗口索引
            while (multiple >= k) {
                //缩短左侧窗口索引时，乘积移出窗口左侧元素
                multiple /= nums[j];
                j++;
            }
            //如果此时i-j+1是以右边界的乘积小于k的所有子数组的个数和
            ans += (i - j + 1);
        }
        return ans;
    }
class Solution {
    public int numSubarrayProductLessThanK(int[] nums, int k) {
        int ans=0;
        for(int i=0;i<nums.length;i++){
            int multiple=nums[i];
            if(multiple<k){
                ans++;
            }
            for(int j=i+1;j<nums.length;j++){
                if(multiple*nums[j]<k){
                    ans++;
                    multiple*=nums[j];
                }else{
                    break;
                }
            }
        }
        return ans;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
