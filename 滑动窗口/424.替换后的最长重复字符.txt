//给你一个仅由大写英文字母组成的字符串，你可以将任意位置上的字符替换成另外的字符，总共可最多替换 k 次。在执行上述操作后，找到包含重复字母的最长子串的长度。
// 
//
// 注意：字符串长度 和 k 不会超过 10⁴。 
//
// 
//
// 示例 1： 
//
// 
//输入：s = "ABAB", k = 2
//输出：4
//解释：用两个'A'替换为两个'B',反之亦然。
// 
//
// 示例 2： 
//
// 
//输入：s = "AABABBA", k = 1
//输出：4
//解释：
//将中间的一个'A'替换为'B',字符串变为 "AABBBBA"。
//子串 "BBBB" 有最长重复字母, 答案为 4。
// 
// Related Topics 哈希表 字符串 滑动窗口 👍 542 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public int characterReplacement(String s, int k) {
        if (s == null) {
            return 0;
        }
        //记录窗口中最多相同字母的个数,窗口右移和扩张需要和新加入的字符总数个数比较即可,不用再去比较所有字符个数的最大值
        int[] map = new int[26];
        char[] chars = s.toCharArray();
        int left = 0, historyCharMax = 0;
        for (int right = 0; right < chars.length; right++) {
            int index = chars[right] - 'A';
            map[index]++;
            //历史窗口最多的相同字母个数
            historyCharMax = Math.max(historyCharMax, map[index]);
            //right-left+1
            //当前窗口更大，大于历史窗口中出现次数最多的字母次数+k,则k不足以全部替换当前窗口中的字符,窗口右移
            if (right - left + 1 > historyCharMax + k) {
                //新字符数量更多,窗口右移,剔除掉左侧窗口,并移动左侧指针
                map[chars[left] - 'A']--;
                left++;
            }
        }
        return chars.length - left;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
