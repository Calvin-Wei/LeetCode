//给定一组 n 人（编号为 1, 2, ..., n）， 我们想把每个人分进任意大小的两组。每个人都可能不喜欢其他人，那么他们不应该属于同一组。 
//
// 给定整数 n 和数组 dislikes ，其中 dislikes[i] = [ai, bi] ，表示不允许将编号为 ai 和 bi的人归入同一组。当可以用
//这种方法将所有人分进两组时，返回 true；否则返回 false。 
//
// 
//
// 
// 
//
// 示例 1： 
//
// 
//输入：n = 4, dislikes = [[1,2],[1,3],[2,4]]
//输出：true
//解释：group1 [1,4], group2 [2,3]
// 
//
// 示例 2： 
//
// 
//输入：n = 3, dislikes = [[1,2],[1,3],[2,3]]
//输出：false
// 
//
// 示例 3： 
//
// 
//输入：n = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]
//输出：false
// 
//
// 
//
// 提示： 
//
// 
// 1 <= n <= 2000 
// 0 <= dislikes.length <= 104 
// dislikes[i].length == 2 
// 1 <= dislikes[i][j] <= n 
// ai < bi 
// dislikes 中每一组都 不同 
// 
//
// 
// Related Topics 深度优先搜索 广度优先搜索 并查集 图 
// 👍 164 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public static final int RED = 1; // 表示红色
    public static final int GREEN = 2; // 表示绿色
    public static final int UNCOLORED = 0; // 表示未染色
    // 方法二： 广度优先
    public boolean possibleBipartition(int n, int[][] dislikes) {
        int color[] = new int[n];
        // 建图
        List<List<Integer>> edge = new ArrayList();
        for(int i = 0; i < n; i++) {
            edge.add(new ArrayList());
        }
        for (int[] d : dislikes) {
            edge.get(d[0] - 1).add(d[1] - 1);
            edge.get(d[1] - 1).add(d[0] - 1);
        }
        for(int i = 0; i < n; i++) {
            if (color[i] == UNCOLORED) {
                Queue<Integer> queue = new LinkedList();
                queue.add(i);
                color[i] = RED;
                while (!queue.isEmpty()) {
                    Integer poll = queue.poll();
                    int reverse = color[poll] == RED ? GREEN : RED;
                    for (Integer u : edge.get(poll)) {
                        if (color[u] == UNCOLORED) {
                            color[u] = reverse;
                            queue.add(u);
                        }
                        if (color[u] != reverse) return false;
                    }
                }
            }
        }
        return true;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
