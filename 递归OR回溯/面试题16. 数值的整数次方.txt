实现函数double Power(double base, int exponent)，求base的exponent次方。不得使用库函数，同时不需要考虑大数问题。

 

示例 1:

输入: 2.00000, 10
输出: 1024.00000
示例 2:

输入: 2.10000, 3
输出: 9.26100
示例 3:

输入: 2.00000, -2
输出: 0.25000
解释: 2-2 = 1/22 = 1/4 = 0.25
 

说明:

-100.0 < x < 100.0
n 是 32 位有符号整数，其数值范围是 [−231, 231 − 1] 。

1.采用分治法和递归进行解答
采用分治法进行解决的原因是为了防止出现内存溢出或者执行超时的问题
分治：若n=2k，则结果为(x^k)^2; 若n=2k+1，则结果为x*[(x^k)^2]; 如此可让n的值每次减半，复杂度O(logn)。
class Solution {
    public double myPow(double m,int n){
        if(m==0){
            return 0;
        }
        long b=n;
        double res=1.0;
        if(b<0){
            m=1/m;
            b=-b;
        }
        while(b>0){
            if(b%2==1){
                res*=m;
            }
            m*=m;
            b/=2;
        }
        return res;
    }
}
