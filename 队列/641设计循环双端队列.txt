设计实现双端队列。
你的实现需要支持以下操作：

  MyCircularDeque(k)：构造函数,双端队列的大小为k。
  insertFront()：将一个元素添加到双端队列头部。 如果操作成功返回 true。
  insertLast()：将一个元素添加到双端队列尾部。如果操作成功返回 true。
  deleteFront()：从双端队列头部删除一个元素。 如果操作成功返回 true。
  deleteLast()：从双端队列尾部删除一个元素。如果操作成功返回 true。
  getFront()：从双端队列头部获得一个元素。如果双端队列为空，返回 -1。
  getRear()：获得双端队列的最后一个元素。 如果双端队列为空，返回 -1。
  isEmpty()：检查双端队列是否为空。
  isFull()：检查双端队列是否满了。
示例：

MyCircularDeque circularDeque = new MycircularDeque(3); // 设置容量大小为3
circularDeque.insertLast(1);			        // 返回 true
circularDeque.insertLast(2);			        // 返回 true
circularDeque.insertFront(3);			        // 返回 true
circularDeque.insertFront(4);			        // 已经满了，返回 false
circularDeque.getRear();  				// 返回 2
circularDeque.isFull();				        // 返回 true
circularDeque.deleteLast();			        // 返回 true
circularDeque.insertFront(4);			        // 返回 true
circularDeque.getFront();


1.题解
class MyCircularDeque {
	private int[] array;
	private int head;
	private int tail;
	private int currentSize;
	private int capacity;

	/** Initialize your data structure here. Set the size of the deque to be k. */
	public MyCircularDeque(int k) {
		array = new int[k];
		head = 0;
		tail = 0;
		currentSize = 0;
		capacity = k;
	}

	/**
	 * Adds an item at the front of Deque. Return true if the operation is
	 * successful.
	 */
	public boolean insertFront(int value) {
		if (tail == head && currentSize == capacity) {
			return false;
		}
		head = (head + capacity - 1) % capacity;
		array[head] = value;
		currentSize++;
		return true;
	}

	/**
	 * Adds an item at the rear of Deque. Return true if the operation is
	 * successful.
	 */
	public boolean insertLast(int value) {
		if (tail == head && currentSize == capacity) {
			return false;
		}
		array[tail] = value;
		tail = (tail + 1 + capacity) % capacity;
		currentSize++;
		return true;
	}

	/**
	 * Deletes an item from the front of Deque. Return true if the operation is
	 * successful.
	 */
	public boolean deleteFront() {
		if (head == tail && currentSize == 0) {
			return false;
		}
		head = (head + 1) % capacity;
		currentSize--;
		return true;
	}

	/**
	 * Deletes an item from the rear of Deque. Return true if the operation is
	 * successful.
	 */
	public boolean deleteLast() {
		if (head == tail && currentSize == 0) {
			return false;
		}
		tail = (tail - 1 + capacity) % capacity;
		currentSize--;
		return true;
	}

	/** Get the front item from the deque. */
	public int getFront() {
		if (head == tail && currentSize == 0) {
			return -1;
		}
		return array[head];
	}

	/** Get the last item from the deque. */
	public int getRear() {
		if (head == tail && currentSize == 0) {
			return -1;
		}
		return array[(tail-1+capacity)%capacity];
	}

	/** Checks whether the circular deque is empty or not. */
	public boolean isEmpty() {
		return head == tail && currentSize == 0;
	}

	/** Checks whether the circular deque is full or not. */
	public boolean isFull() {
		return head == tail && currentSize == capacity;
	}
}
