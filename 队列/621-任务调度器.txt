给定一个用字符数组表示的 CPU 需要执行的任务列表。其中包含使用大写的 A - Z 字母表示的26 种不同种类的任务。任务可以以任意顺序执行，并且每个任务都可以在 1 个单位时间内执行完。CPU 在任何一个单位时间内都可以执行一个任务，或者在待命状态。
然而，两个相同种类的任务之间必须有长度为 n 的冷却时间，因此至少有连续 n 个单位时间内 CPU 在执行不同的任务，或者在待命状态。
你需要计算完成所有任务所需要的最短时间。

 

示例 ：

输入：tasks = ["A","A","A","B","B","B"], n = 2
输出：8
解释：A -> B -> (待命) -> A -> B -> (待命) -> A -> B.
 

提示：

任务的总个数为 [1, 10000]。
n 的取值范围为 [0, 100]。


题解：
第一种“优先队列”方式，执行效率低.
	public static int leastInterval(char[] chars,int n){
        int[] mapArray=new int[26];
        for(char c:chars){
            mapArray[c-'A']++;
        }
        //优先队列
        PriorityQueue<Integer> priorityQueue=new PriorityQueue<>(26,Collections.<Integer>reverseOrder());
        int time=0;
        for(int item:mapArray){
            if(item>0){
                priorityQueue.add(item);
            }
        }
        while(!priorityQueue.isEmpty()){
            int i=0;
            //暂时存放的list，用于存放1次以上的任务列表
            List<Integer> tempList=new ArrayList<>();
            while(i<=n){//相同任务之间必须间隔n个时间片
                if(priorityQueue.isEmpty() && tempList.isEmpty()){
                    break;
                }
                if(!priorityQueue.isEmpty()){
                    if(priorityQueue.peek()>1){
                        tempList.add(priorityQueue.poll()-1);//当前剩余执行次数-1
                    }else{
                        priorityQueue.poll();//当前任务执行最后一次
                    }
                }
                time++;
                i++;
            }
            priorityQueue.addAll(tempList);//覆盖优先队列中的任务执行列表
        }
        return time;
    }

第二种“使用排序方式”：
排序公式：(count[25] - 1) * (n + 1) + maxCount
假设数组 ["A","A","A","B","B","C"]，n = 2，A的频率最高，记为count = 3，所以两个A之间必须间隔2个任务，才能满足题意并且是最短时间（两个A的间隔大于2的总时间必然不是最短），
因此执行顺序为： A->X->X->A->X->X->A，这里的X表示除了A以外其他字母，或者是待命，不用关心具体是什么，反正用来填充两个A的间隔的。
上面执行顺序的规律是： 有count - 1个A，其中每个A需要搭配n个X，再加上最后一个A，所以总时间为 (count - 1) * (n + 1) + 1

要注意可能会出现多个频率相同且都是最高的任务，比如 ["A","A","A","B","B","B","C","C"]，所以最后会剩下一个A和一个B，因此最后要加上频率最高的不同任务的个数 maxCount
公式算出的值可能会比数组的长度小，如["A","A","B","B"]，n = 0，此时要取数组的长度


	public int leastIntervalTest(char[] tasks, int n) {
        if (tasks.length <= 1 || n < 1) return tasks.length;
        //步骤1
        int[] counts = new int[26];
        for (int i = 0; i < tasks.length; i++) {
            counts[tasks[i] - 'A']++;
        }
        //步骤2
        Arrays.sort(counts);
        int maxCount = counts[25];
        int retCount = (maxCount - 1) * (n + 1) + 1;
        int i = 24;
        //步骤3
        while (i >= 0 && counts[i] == maxCount) {
            retCount++;
            i--;
        }
        //步骤4
        return Math.max(retCount, tasks.length);
    }
