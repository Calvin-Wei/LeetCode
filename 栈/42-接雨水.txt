1.使用栈的题解
public int trap(int[] height) {
    int sum = 0;
    Stack<Integer> stack = new Stack<>();
    int current = 0;
    while (current < height.length) {
        //如果栈不空并且当前指向的高度大于栈顶高度就一直循环
        while (!stack.empty() && height[current] > height[stack.peek()]) {
            int h = height[stack.peek()]; //取出要出栈的元素
            stack.pop(); //出栈
            if (stack.empty()) { // 栈空就出去
                break; 
            }
            int distance = current - stack.peek() - 1; //两堵墙之前的距离。
            int min = Math.min(height[stack.peek()], height[current]);
            sum = sum + distance * (min - h);
        }
        stack.push(current); //当前指向的墙入栈
        current++; //指针后移
    }
    return sum;
}
2.双指针的题解
class Solution {
    public int trap(int[] heights) {
        int sum = 0;
        for (int i = 0; i < heights.length; i++) {
            //第一个和最后一个不接雨水
            if (i == 0 || i == heights.length - 1) {
                continue;
            }
            //寻找右边最大的柱子
            int right = heights[i];
            //寻找左边最大的柱子
            int left = heights[i];

            for (int t = i + 1; t < heights.length; t++) {
                if(heights[t]>right){
                    right=heights[t];
                }
            }
            for (int t=i-1;t>=0;t--){
                if(heights[t]>left){
                    left=heights[t];
                }
            }

            int h=Math.min(left,right)-heights[i];
            if(h>0){
                sum+=h;
            }
        }
        return sum;
    }
}
3.动态规划解法
class Solution {
    public int trap(int[] heights) {
        if(heights.length<=2){
            return 0;
        }
        int[] leftArray=new int[heights.length];
        int[] rightArray=new int[heights.length];
        int size=heights.length;
        leftArray[0]=heights[0];
        for(int i=1;i<size;i++){
            leftArray[i]=Math.max(heights[i],leftArray[i-1]);
        }
        rightArray[size-1]=heights[size-1];
        for (int i=size-2;i>=0;i--){
            rightArray[i]=Math.max(heights[i],rightArray[i+1]);
        }
        int sum=0;
        for(int i=0;i<size;i++){
            int count=Math.min(leftArray[i],rightArray[i])-heights[i];
            if(count>0){
                sum+=count;
            }
        }
        return sum;
    }
}
