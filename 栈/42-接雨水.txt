1.使用栈的题解
public int trap(int[] height){
        int size = height.length;

        if (size <= 2) return 0;

        // 栈中存放height的下标索引,单调递增
        Stack<Integer> stack = new Stack<>();
        stack.push(0);
        int sum = 0;
        for (int index = 1; index < size; index++){
            int stackTop = stack.peek();
            //递增的放入栈中
            if (height[index] < height[stackTop]){
                stack.push(index);
            }else if (height[index] == height[stackTop]){
                // 因为相等的相邻墙，左边一个是不可能存放雨水的，所以pop左边的index, push当前的index
                stack.pop();
                stack.push(index);
            }else{
                //如果栈顶的元素小,则弹出
                int heightAtIdx = height[index];
                while (!stack.isEmpty() && (heightAtIdx > height[stackTop])){
                    //mid是凹槽的底部，也就是中间位置
                    int mid = stack.pop();
                    //弹出栈顶的小元素后,计算盛水的容量
                    if (!stack.isEmpty()){
                        //left是凹槽最左边的柱子的下标
                        int left = stack.peek();
                        //index当前位置是凹槽最右侧的柱子的下标
                        int h = Math.min(height[left], height[index]) - height[mid];
                        int w = index - left - 1;
                        int hold = h * w;
                        if (hold > 0) sum += hold;
                        stackTop = stack.peek();
                    }
                }
                stack.push(index);
            }
        }
        return sum;
    }2.双指针的题解
class Solution {
    public int trap(int[] heights) {
        int sum = 0;
        for (int i = 0; i < heights.length; i++) {
            //第一个和最后一个不接雨水
            if (i == 0 || i == heights.length - 1) {
                continue;
            }
            //寻找右边最大的柱子
            int right = heights[i];
            //寻找左边最大的柱子
            int left = heights[i];

            for (int t = i + 1; t < heights.length; t++) {
                if(heights[t]>right){
                    right=heights[t];
                }
            }
            for (int t=i-1;t>=0;t--){
                if(heights[t]>left){
                    left=heights[t];
                }
            }

            int h=Math.min(left,right)-heights[i];
            if(h>0){
                sum+=h;
            }
        }
        return sum;
    }
}
3.动态规划解法
class Solution {
    public int trap(int[] heights) {
        if(heights.length<=2){
            return 0;
        }
        int[] leftArray=new int[heights.length];
        int[] rightArray=new int[heights.length];
        int size=heights.length;
        leftArray[0]=heights[0];
        for(int i=1;i<size;i++){
            leftArray[i]=Math.max(heights[i],leftArray[i-1]);
        }
        rightArray[size-1]=heights[size-1];
        for (int i=size-2;i>=0;i--){
            rightArray[i]=Math.max(heights[i],rightArray[i+1]);
        }
        int sum=0;
        for(int i=0;i<size;i++){
            int count=Math.min(leftArray[i],rightArray[i])-heights[i];
            if(count>0){
                sum+=count;
            }
        }
        return sum;
    }
}
