给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。

求在该柱状图中，能够勾勒出来的矩形的最大面积。

 

示例:

输入: [2,1,5,6,2,3]
输出: 10

class Solution {
    /**
     * 当遇到A柱子的高度比上一个B柱子高度小,则确定该A柱子之前一些柱子的最大宽度。从A的下标开始往左移动
     * 确定面积时除了右边的高度小，左边的高度也要比中间小
     * 单调栈中记录的还是下标（单调递减）
     * 原数组进行扩展，左右两侧添加两个高度为0的柱子（比原数组中的任意元素都小）
     * 单调栈也存放一个0的柱子，用做哨兵
     */
    public int largestRectangleArea(int[] heights) {
        if (heights == null || heights.length == 0) {
            return 0;
        }
        int len = heights.length;
        if (len == 1) {
            return heights[0];
        }
        int res = 0;
        int[] newHeights = new int[len + 2];
        newHeights[0] = 0;
        System.arraycopy(heights, 0, newHeights, 1, len);
        newHeights[len + 1] = 0;
        Deque<Integer> deque = new ArrayDeque<>(len);
        deque.addLast(0);
        for (int i = 1; i < len+2; i++) {
            while (newHeights[i] < newHeights[deque.peekLast()]) {
                int curHeight=newHeights[deque.pollLast()];
                int curWidth=i-deque.peekLast()-1;
                res=Math.max(res,curHeight*curWidth);
            }
            deque.addLast(i);
        }
        return res;
    }
}

1.
class Solution {
    int largestRectangleArea(int[] heights) {
        Stack<Integer> st = new Stack<Integer>();
        
        // 数组扩容，在头和尾各加入一个元素
        int [] newHeights = new int[heights.length + 2];
        newHeights[0] = 0;
        newHeights[newHeights.length - 1] = 0;
        for (int index = 0; index < heights.length; index++){
            newHeights[index + 1] = heights[index];
        }

        heights = newHeights;
        
        st.push(0);
        int result = 0;
        // 第一个元素已经入栈，从下标1开始
        for (int i = 1; i < heights.length; i++) {
            // 注意heights[i] 是和heights[st.top()] 比较 ，st.top()是下标
            if (heights[i] > heights[st.peek()]) {
                st.push(i);
            } else if (heights[i] == heights[st.peek()]) {
                st.pop(); // 这个可以加，可以不加，效果一样，思路不同
                st.push(i);
            } else {
                while (heights[i] < heights[st.peek()]) { // 注意是while
                    int mid = st.peek();
                    st.pop();
                    int left = st.peek();
                    int right = i;
                    int w = right - left - 1;
                    int h = heights[mid];
                    result = Math.max(result, w * h);
                }
                st.push(i);
            }
        }
        return result;
    }
}
