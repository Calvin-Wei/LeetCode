//n 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。 
//
// 给你一个整数 n ，返回 n 皇后问题 不同的解决方案的数量。 
//
// 
//
// 
// 
// 示例 1： 
//
// 
//输入：n = 4
//输出：2
//解释：如上图所示，4 皇后问题存在两个不同的解法。
// 
//
// 示例 2： 
//
// 
//输入：n = 1
//输出：1
// 
//
// 
//
// 提示： 
//
// 
// 1 <= n <= 9 
// 皇后彼此不能相互攻击，也就是说：任何两个皇后都不能处于同一条横行、纵行或斜线上。 
// 
// 
// 
// Related Topics 回溯 
// 👍 293 👎 0


import java.util.Arrays;

//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    private int result;

    public int totalNQueens(int n) {
        char[][] chessArray=new char[n][n];
        for(char[] array:chessArray){
            Arrays.fill(array,'.');
        }
        calNQueens(chessArray,n,0);

        return result;
    }

    private void calNQueens(char[][] chessArray,int n,int row){
        if(row==n){
            result+=1;
            return;
        }
        for (int column=0;column<n;++column){
            if(isOk(row,column,n,chessArray)){
                chessArray[row][column]='Q';
                calNQueens(chessArray,n,row+1);
                chessArray[row][column]='.';
            }
        }
    }

    private boolean isOk(int row, int column,int n, char[][] chessArray) {
        for(int i=0;i<row;i++){
            if (chessArray[i][column] == 'Q') {
                return false;
            }
        }
        for(int i=row-1,j=column-1;i>=0 && j>=0;i--,j--){
            if (chessArray[i][j]=='Q'){
                return false;
            }
        }
        for(int i=row-1,j=column+1;i>=0 && j<=n-1;i--,j++){
            if(chessArray[i][j]=='Q'){
                return false;
            }
        }
        return true;
    }


}
//leetcode submit region end(Prohibit modification and deletion)
