//有一个 m × n 的矩形岛屿，与 太平洋 和 大西洋 相邻。 “太平洋” 处于大陆的左边界和上边界，而 “大西洋” 处于大陆的右边界和下边界。 
//
// 这个岛被分割成一个由若干方形单元格组成的网格。给定一个 m x n 的整数矩阵 heights ， heights[r][c] 表示坐标 (r, c) 上
//单元格 高于海平面的高度 。 
//
// 岛上雨水较多，如果相邻单元格的高度 小于或等于 当前单元格的高度，雨水可以直接向北、南、东、西流向相邻单元格。水可以从海洋附近的任何单元格流入海洋。 
//
// 返回 网格坐标 result 的 2D列表 ，其中 result[i] = [ri, ci] 表示雨水可以从单元格 (ri, ci) 流向 太平洋和大西洋
// 。 
//
// 
//
// 示例 1： 
//
// 
//
// 
//输入: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]
//输出: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]
// 
//
// 示例 2： 
//
// 
//输入: heights = [[2,1],[1,2]]
//输出: [[0,0],[0,1],[1,0],[1,1]]
// 
//
// 
//
// 提示： 
//
// 
// m == heights.length 
// n == heights[r].length 
// 1 <= m, n <= 200 
// 0 <= heights[r][c] <= 105 
// 
// Related Topics 深度优先搜索 广度优先搜索 数组 矩阵 
// 👍 350 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    /**
     * 上下左右四个方向移动
     */
    int[][] direction={
            {1,0},{0,1},{-1,0},{0,-1}
    };
    public List<List<Integer>> pacificAtlantic(int[][] heights) {
        List<List<Integer>> ans=new ArrayList<>();
        if(heights==null || heights.length==0){
            return ans;
        }
        int row=heights.length,column=heights[0].length;
        //太平洋节点矩阵
        int[][] visited=new int[row][column];
        //大西洋节点矩阵
        int[][] v=new int[row][column];
        //上下边界开始大洋矩阵的搜索，变动是列
        for(int i=0;i<column;i++){
            dfs(heights,0,i,visited);
            dfs(heights,row-1,i,v);
        }
        //左右边界开始大洋矩阵的搜索，变动是行
        for(int i=0;i<row;i++){
            dfs(heights,i,0,visited);
            dfs(heights,i,column-1,v);
        }
        //挨个遍历两个矩阵
        for(int i=0;i<row;i++){
            for (int j=0;j<column;j++){
                if(visited[i][j]==1 && v[i][j]==1){
                    ans.add(Arrays.asList(i,j));
                }
            }
        }
        return ans;
    }

    private void dfs(int[][] heights, int x, int y, int[][] visited) {
        visited[x][y]=1;
        for (int[] dir:direction){
            int newX=x+dir[0];
            int newY=y+dir[1];
            if(newX<0 || newX>=heights.length || newY<0 || newY>=heights[0].length || heights[newX][newY] < heights[x][y] || visited[newX][newY]==1){
                continue;
            }
            dfs(heights,newX,newY,visited);
        }
    }
}
//leetcode submit region end(Prohibit modification and deletion)
