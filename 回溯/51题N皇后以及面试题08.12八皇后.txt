//n 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。 
//
// 给你一个整数 n ，返回所有不同的 n 皇后问题 的解决方案。 
//
// 
// 
// 每一种解法包含一个不同的 n 皇后问题 的棋子放置方案，该方案中 'Q' 和 '.' 分别代表了皇后和空位。 
//
// 
//
// 示例 1： 
//
// 
//输入：n = 4
//输出：[[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
//解释：如上图所示，4 皇后问题存在两个不同的解法。
// 
//
// 示例 2： 
//
// 
//输入：n = 1
//输出：[["Q"]]
// 
//
// 
//
// 提示： 
//
// 
// 1 <= n <= 9 
// 皇后彼此不能相互攻击，也就是说：任何两个皇后都不能处于同一条横行、纵行或斜线上。 
// 
// 
// 
// Related Topics 数组 回溯 👍 1019 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
class Solution{
    List<List<String>> result=new ArrayList<>();

    public List<List<String>> solveNQueens(int n){
        char[][] chessboard=new char[n][n];
        for(char[] array:chessboard){
            Arrays.fill(array,'.');
        }
        backTrack(n,0,chessboard);
        return result;
    }

    private void backTrack(int n, int row, char[][] chessboard) {
        if(row==n){
            result.add(ArrayToList(chessboard));
            return;
        }
        for(int col=0;col<n;col++){
            if(isValid(row,col,n,chessboard)){
                chessboard[row][col]='Q';
                backTrack(n,row+1,chessboard);
                chessboard[row][col]='.';
            }
        }
    }

    private boolean isValid(int row, int col, int n, char[][] chessboard) {
        //判断列,相当于剪枝
        for(int i=0;i<row;i++){
            if(chessboard[i][col]=='Q'){
                return false;
            }
        }
        //左侧对角线
        for(int i=row-1,j=col-1;i>=0 && j>=0;i--,j--){
            if(chessboard[i][j]=='Q'){
                return false;
            }
        }
        //右侧对角线
        for(int i=row-1,j=col+1;i>=0 && j<=n-1;i--,j++){
            if(chessboard[i][j]=='Q'){
                return false;
            }
        }
        return true;
    }

    private List<String> ArrayToList(char[][] chessboard) {
        List<String> list=new ArrayList<>();
        for(char[] c:chessboard){
            list.add(String.copyValueOf(c));
        }
        return list;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
