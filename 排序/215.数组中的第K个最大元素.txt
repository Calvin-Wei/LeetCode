//给定整数数组 nums 和整数 k，请返回数组中第 k 个最大的元素。 
//
// 请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。 
//
// 
//
// 示例 1: 
//
// 
//输入: [3,2,1,5,6,4] 和 k = 2
//输出: 5
// 
//
// 示例 2: 
//
// 
//输入: [3,2,3,1,2,4,5,5,6] 和 k = 4
//输出: 4 
//
// 
//
// 提示： 
//
// 
// 1 <= k <= nums.length <= 104 
// -104 <= nums[i] <= 104 
// 
// Related Topics 数组 分治 快速选择 排序 堆（优先队列） 
// 👍 1448 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public int findKthLargest(int[] nums, int k) {
        int heapSize=nums.length;
        buildMaxHeap(nums,heapSize);
        for(int i=nums.length-1;i>=nums.length-k+1;i--){
            //将最后一个元素放置堆顶,然后进行排序
            swap(nums,0,i);
            //heapSize最终变为len-k代表第k大的数放置堆顶在排序
            --heapSize;
            //每次都重新排序
            maxHeapify(nums,0,heapSize);
        }
        return nums[0];
    }

    private void buildMaxHeap(int[] nums, int heapSize) {
        for (int i=heapSize/2;i>=0;i--){
            maxHeapify(nums,i,heapSize);
        }
    }

    private void maxHeapify(int[] nums, int index, int heapSize) {
        int left=index*2+1;
        while(left<heapSize){
            int largest=left+1<heapSize && nums[left+1] > nums[left] ? left+1:left;
            largest = nums[largest] < nums[index] ? index:largest;
            //没变化的情况,表示堆已完成排序,提前终止
            if (largest==index){
                break;
            }
            swap(nums,index,largest);
            index=largest;
            left=index*2+1;
        }
    }

    private void swap(int[] nums, int i, int j) {
        int temp=nums[i];
        nums[i]=nums[j];
        nums[j]=temp;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
