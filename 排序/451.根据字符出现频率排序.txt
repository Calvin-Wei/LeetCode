//给定一个字符串，请将字符串里的字符按照出现的频率降序排列。 
//
// 示例 1: 
//
// 
//输入:
//"tree"
//
//输出:
//"eert"
//
//解释:
//'e'出现两次，'r'和't'都只出现一次。
//因此'e'必须出现在'r'和't'之前。此外，"eetr"也是一个有效的答案。
// 
//
// 示例 2: 
//
// 
//输入:
//"cccaaa"
//
//输出:
//"cccaaa"
//
//解释:
//'c'和'a'都出现三次。此外，"aaaccc"也是有效的答案。
//注意"cacaca"是不正确的，因为相同的字母必须放在一起。
// 
//
// 示例 3: 
//
// 
//输入:
//"Aabb"
//
//输出:
//"bbAa"
//
//解释:
//此外，"bbaA"也是一个有效的答案，但"Aabb"是不正确的。
//注意'A'和'a'被认为是两种不同的字符。
// 
// Related Topics 哈希表 字符串 桶排序 计数 排序 堆（优先队列） 👍 365 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public String frequencySort(String s) {
        if (s == null || s.isEmpty()) {
            return s;
        }
        //key存放每个字符,value为出现次数
        Map<Character, Integer> map = new HashMap<>();
        //结果字符串
        StringBuilder result = new StringBuilder();
        //先存放字符的出现次数
        for (char c : s.toCharArray()) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        //一个桶一个集合，每个桶存放i出现次数的字符集合，长度+1是因为buckets[0]没有意义
        List<Character>[] buckets = new List[s.length() + 1];
        for (char key : map.keySet()) {
            int value = map.get(key);
            if (buckets[value] == null) {
                buckets[value] = new ArrayList<>();
            }
            buckets[value].add(key);
        }
        //拼接最后结果
        for (int i = buckets.length - 1; i > 0; --i) {
            //遍历每个桶
            if (buckets[i] != null) {
                //如果有字符
                for (char c : buckets[i]) {
                    for (int k = i; k > 0; --k) {
                        result.append(c);
                    }
                }
            }
        }
        return result.toString();
    }
}
//leetcode submit region end(Prohibit modification and deletion)
