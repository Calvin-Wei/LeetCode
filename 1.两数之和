给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。

你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。

示例:

给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]


1.循环嵌套解法--耗时长
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] result=new int[2];
        outter:for(int i=0;i<nums.length;i++){
            for(int j=i+1;j<nums.length;j++){
                if(nums[j]+nums[i]==target){
                    result[0]=i;
                    result[1]=j;
                    break outter;
                }
            }
        }
        return result;
    }
}
2.使用map解法--大幅度减少执行时间（推荐）
将nums的数值放入到map当中，判断target-nums[i]的差值在map中是否存在，存在则从map中取出下标，直接返回
class Solution {
    public int[] twoSum(int[] nums, int target) {
        //key放下标索引，value放nums数组值
        Map<Integer,Integer> param=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            int complement=target-nums[i];//判断差值在map中是否存在
            if(param.containsKey(complement)){
                return new int[]{param.get(complement),i};
            }
            param.put(nums[i],i);//nums放入map中
        }
        return new int[]{0,0};
    }
}
