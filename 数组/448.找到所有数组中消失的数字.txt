//给你一个含 n 个整数的数组 nums ，其中 nums[i] 在区间 [1, n] 内。请你找出所有在 [1, n] 范围内但没有出现在 nums 中的数
//字，并以数组的形式返回结果。 
//
// 
//
// 示例 1： 
//
// 
//输入：nums = [4,3,2,7,8,2,3,1]
//输出：[5,6]
// 
//
// 示例 2： 
//
// 
//输入：nums = [1,1]
//输出：[2]
// 
//
// 
//
// 提示： 
//
// 
// n == nums.length 
// 1 <= n <= 10⁵ 
// 1 <= nums[i] <= n 
// 
//
// 进阶：你能在不使用额外空间且时间复杂度为 O(n) 的情况下解决这个问题吗? 你可以假定返回的数组不算在额外空间内。 
// Related Topics 数组 哈希表 👍 878 👎 0


import java.util.List;

//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    /**
     * 原地哈希
     */
    public List<Integer> findDisappearedNumbers(int[] nums) {
        List<Integer> resultList = new ArrayList<>();
        int i=0;
        while(i < nums.length) {
            //一个萝卜一个坑,例如：数字1在0
            if (i + 1 == nums[i]) {
                i++;
                continue;
            }
            //当前元素应该出现在哪个位置,例如8应该出现在7位置
            int index = nums[i] - 1;
            //当前元素=理想位置上的现有元素,说明数组中有重复数字
            if (nums[i] == nums[index]) {
                i++;
                continue;
            }
            //不重复则交换.这里不进行i++是因为交换过来的元素也需要判断是不是在理想位置上
            swap(nums, i, index);
        }
        for (int j = 0; j < nums.length; j++) {
            if (nums[j] != j + 1) {
                resultList.add(j + 1);
            }
        }
        return resultList;
    }
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
