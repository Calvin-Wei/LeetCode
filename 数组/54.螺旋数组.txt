//给你一个 m 行 n 列的矩阵 matrix ，请按照 顺时针螺旋顺序 ，返回矩阵中的所有元素。 
//
// 
//
// 示例 1： 
//
// 
//输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]
//输出：[1,2,3,6,9,8,7,4,5]
// 
//
// 示例 2： 
//
// 
//输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
//输出：[1,2,3,4,8,12,11,10,9,5,6,7]
// 
//
// 
//
// 提示： 
//
// 
// m == matrix.length 
// n == matrix[i].length 
// 1 <= m, n <= 10 
// -100 <= matrix[i][j] <= 100 
// 
// Related Topics 数组 
// 👍 806 👎 0


import java.util.List;

//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> resultList=new ArrayList<>();
        int tr=0,tc=0;
        int dr=matrix.length-1,dc= matrix[0].length-1;
        while(tr<=dr && tc<=dc){
            rotateArray(resultList,tr++,tc++,dr--,dc--,matrix);
        }

        return resultList;
    }

    public void rotateArray(List<Integer> resultList, int tr, int tc, int dr, int dc, int[][] matrix){
        //子矩阵只有一列的时候
        if(tr == dr){
            for(int i = tc; i<= dc; i++){
                resultList.add(matrix[tr][i]);
            }
        }else if (tc == dc){
            for(int i=tr;i<=dr;i++){
                resultList.add(matrix[i][tc]);
            }
        }else {
            int curRow=tr;
            int curColumn=tc;
            while(curColumn!= dc){
                resultList.add(matrix[curRow][curColumn++]);
            }
            while(curRow!=dr){
                resultList.add(matrix[curRow++][curColumn]);
            }
            while(curColumn>tc){
                resultList.add(matrix[curRow][curColumn--]);
            }
            while(curRow>tr){
                resultList.add(matrix[curRow--][curColumn]);
            }
        }
    }

}
//leetcode submit region end(Prohibit modification and deletion)
