//输入整数数组 arr ，找出其中最小的 k 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。 
//
// 
//
// 示例 1： 
//
// 输入：arr = [3,2,1], k = 2
//输出：[1,2] 或者 [2,1]
// 
//
// 示例 2： 
//
// 输入：arr = [0,1,2,1], k = 1
//输出：[0] 
//
// 
//
// 限制： 
//
// 
// 0 <= k <= arr.length <= 10000 
// 0 <= arr[i] <= 10000 
// 
// Related Topics 堆 分治算法 
// 👍 262 👎 0


1.大根堆方式进行处理，时间复杂度O(NlogK)
class Solution {
    public int[] getLeastNumbers(int[] arr,int k){
        if(k<1 || k>arr.length){
            return new int[]{};
        }
        int[] kHeap=new int[k];
        for(int i=0;i<k;i++){
            heapInsert(kHeap,arr[i],i);
        }
        for(int i=k;i<arr.length;i++){
            if(arr[i]<kHeap[0]){
                kHeap[0]=arr[i];
                heapify(kHeap,0,k);
            }
        }
        return kHeap;
    }
    //调整堆
    private void heapify(int[] arr, int index, int heapSize) {
        int left=index*2+1;
        int right=index*2+2;
        int largest=index;
        while(left<heapSize){
            if(arr[left]>arr[index]){
                largest=left;
            }
            if(right<heapSize && arr[right] > arr[largest]){
                largest=right;
            }
            if(largest != index){
                swap(arr,largest,index);
            }else{
                break;
            }
            index=largest;
            left=index*2+1;
            right=index*2+2;
        }
    }
    //创建堆
    public void heapInsert(int[] arr,int value,int index){
        arr[index]=value;
        while(index>0){
            int parent=(index-1)/2;
            if(arr[parent]<arr[index]){
                swap(arr,parent,index);
                index=parent;
            }else {
                break;
            }
        }
    }

    private void swap(int[] arr, int parent, int index) {
        int tmp=arr[parent];
        arr[parent]=arr[index];
        arr[index]=tmp;
    }
}
