//给你一个整数数组 nums ，你需要找出一个 连续子数组 ，如果对这个子数组进行升序排序，那么整个数组都会变为升序排序。 
//
// 请你找出符合题意的 最短 子数组，并输出它的长度。 
//
// 
//
// 
// 
// 示例 1： 
//
// 
//输入：nums = [2,6,4,8,10,9,15]
//输出：5
//解释：你只需要对 [6, 4, 8, 10, 9] 进行升序排序，那么整个表都会变为升序排序。
// 
//
// 示例 2： 
//
// 
//输入：nums = [1,2,3,4]
//输出：0
// 
//
// 示例 3： 
//
// 
//输入：nums = [1]
//输出：0
// 
//
// 
//
// 提示： 
//
// 
// 1 <= nums.length <= 104 
// -105 <= nums[i] <= 105 
// 
//
// 
//
// 进阶：你可以设计一个时间复杂度为 O(n) 的解决方案吗？ 
// 
// 
// Related Topics 数组 
// 👍 549 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public int findUnsortedSubarray(int[] nums) {
        if(nums==null || nums.length<2){
            return 0;
        }
        //从右向左开始遍历非最小元素的下标索引
        int min=nums[nums.length-1];
        int noMinIndex=-1;
        for(int i=nums.length-2;i>=0;i--){
            if(nums[i]>min){
                noMinIndex=i;
            }else{
                min=Math.min(nums[i],min);
            }
        }
        if(noMinIndex==-1){
            return 0;
        }
        //从左到右寻找非最大值的下标索引
        int noMaxIndex=-1;
        int max=nums[0];
        for(int i=1;i<nums.length;i++){
            if(nums[i]<max){
                noMaxIndex=i;
            }else{
                max=Math.max(nums[i],max);
            }
        }
        //最大值和最小值索引之间的数量即为需要排序的
        return noMaxIndex-noMinIndex==0?0:noMaxIndex-noMinIndex+1;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
