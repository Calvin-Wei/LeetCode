//给定一个非负整数数组 A， A 中一半整数是奇数，一半整数是偶数。 
//
// 对数组进行排序，以便当 A[i] 为奇数时，i 也是奇数；当 A[i] 为偶数时， i 也是偶数。 
//
// 你可以返回任何满足上述条件的数组作为答案。 
//
// 
//
// 示例： 
//
// 输入：[4,2,5,7]
//输出：[4,5,2,7]
//解释：[4,7,2,5]，[2,5,4,7]，[2,7,4,5] 也会被接受。
// 
//
// 
//
// 提示： 
//
// 
// 2 <= A.length <= 20000 
// A.length % 2 == 0 
// 0 <= A[i] <= 1000 
// 
//
// 
// Related Topics 数组 双指针 排序 
// 👍 212 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
//普通双循环的解法
class Solution {
    public int[] sortArrayByParityII(int[] nums) {
        if(nums.length<2){
            return nums;
        }
        int index=0;
        int[] ans =new int[nums.length];
        for (int j : nums) {
            if (j % 2 == 0) {
                ans[index] = j;
                index += 2;
            }
        }
        index=1;
        for (int num : nums) {
            if (num % 2 != 0) {
                ans[index] = num;
                index += 2;
            }
        }
        return ans;
    }
}

//双指针解法，left代表偶数的指针,right代表奇数的指针
class Solution {
    public int[] sortArrayByParityII(int[] nums) {
        if(nums==null || nums.length<2){
            return nums;
        }
        //i偶数下标,j奇数下标
        int j=1;
        for(int i=0;i<nums.length;i+=2){
            //偶数下标找到奇数
            if(nums[i]%2!=0){
                //奇数下标推算偶数位置
                while(nums[j]%2!=0){
                    j+=2;
                }
                //交换位置
                swap(nums,i,j);
            }
        }
        return nums;
    }

    public void swap(int[] arr, int i, int j){
        int temp=arr[i];
        arr[i]=arr[j];
        arr[j]=temp;
    }
}

//leetcode submit region end(Prohibit modification and deletion)
