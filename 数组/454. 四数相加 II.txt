给定四个包含整数的数组列表 A , B , C , D ,计算有多少个元组 (i, j, k, l) ，使得 A[i] + B[j] + C[k] + D[l] = 0。

为了使问题简单化，所有的 A, B, C, D 具有相同的长度 N，且 0 ≤ N ≤ 500 。所有整数的范围在 -228 到 228 - 1 之间，最终结果不会超过 231 - 1 。

例如:

输入:
A = [ 1, 2]
B = [-2,-1]
C = [-1, 2]
D = [ 0, 2]

输出:
2

解释:
两个元组如下:
1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0
2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0




class Solution {
    public int fourSumCount(int[] nums1, int[] nums2, int[] nums3, int[] nums4) {
        int result=0;
        HashMap<Integer,Integer> map=new HashMap<>();
        for(int i:nums1){
            for(int j:nums2){
                //key 是前两个数组的元素和，value是出现的次数,如果key重复存在则value+1
                map.merge(i+j,1, (oldValue,newValue)-> oldValue+1);
            }
        }

        for(int i:nums3){
            for(int j:nums4){
                //key 根据后两个输组的元素和取负数,key不存在时value取0
                result+=map.getOrDefault(-i-j,0);
            }
        }

        return result;
    }
}
