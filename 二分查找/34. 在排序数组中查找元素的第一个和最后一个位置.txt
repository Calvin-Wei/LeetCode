//给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。 
//
// 如果数组中不存在目标值 target，返回 [-1, -1]。 
//
// 进阶： 
//
// 
// 你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？ 
// 
//
// 
//
// 示例 1： 
//
// 
//输入：nums = [5,7,7,8,8,10], target = 8
//输出：[3,4] 
//
// 示例 2： 
//
// 
//输入：nums = [5,7,7,8,8,10], target = 6
//输出：[-1,-1] 
//
// 示例 3： 
//
// 
//输入：nums = [], target = 0
//输出：[-1,-1] 
//
// 
//
// 提示： 
//
// 
// 0 <= nums.length <= 105 
// -109 <= nums[i] <= 109 
// nums 是一个非递减数组 
// -109 <= target <= 109 
// 
// Related Topics 数组 二分查找 
// 👍 1252 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] resultArray=new int[]{-1,-1};
        if(nums.length==1 && nums[0]==target){
            return new int[]{0,0};
        }
        int left=0,right=nums.length-1;
        //flag第一次为false表示查找第一次出现的位置,true时查找最后一次出现的位置,如果找到最后一次出现的位置,改为false
        boolean flag=false;
        while(left<=right){
            if(nums[left]==target && !flag){
                resultArray[0]=left;
                flag=true;
            }else if (!flag){
                left++;
            }
            if(flag){
                if(nums[right]==target){
                    resultArray[1]=right;
                    flag=false;
                    break;
                }else {
                    right--;
                }
            }
        }
        //如果没有找到最后一次出现的位置,则第一次出现位置就是最后一次出现位置
        if(flag){
            resultArray[1]=resultArray[0];
        }
        return resultArray;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
