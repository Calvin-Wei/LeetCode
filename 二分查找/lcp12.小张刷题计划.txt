//为了提高自己的代码能力，小张制定了 LeetCode 刷题计划，他选中了 LeetCode 题库中的 n 道题，编号从 0 到 n-1，并计划在 m 天内按
//照题目编号顺序刷完所有的题目（注意，小张不能用多天完成同一题）。 
//
// 在小张刷题计划中，小张需要用 time[i] 的时间完成编号 i 的题目。此外，小张还可以使用场外求助功能，通过询问他的好朋友小杨题目的解法，可以省去该题
//的做题时间。为了防止“小张刷题计划”变成“小杨刷题计划”，小张每天最多使用一次求助。 
//
// 我们定义 m 天中做题时间最多的一天耗时为 T（小杨完成的题目不计入做题总时间）。请你帮小张求出最小的 T是多少。 
//
// 示例 1： 
//
// 
// 输入：time = [1,2,3,3], m = 2 
//
// 输出：3 
//
// 解释：第一天小张完成前三题，其中第三题找小杨帮忙；第二天完成第四题，并且找小杨帮忙。这样做题时间最多的一天花费了 3 的时间，并且这个值是最小的。 
// 
//
// 示例 2： 
//
// 
// 输入：time = [999,999,999], m = 4 
//
// 输出：0 
//
// 解释：在前三天中，小张每天求助小杨一次，这样他可以在三天内完成所有的题目并不花任何时间。 
// 
//
// 
//
// 限制： 
//
// 
// 1 <= time.length <= 10^5 
// 1 <= time[i] <= 10000 
// 1 <= m <= 1000 
// 
// Related Topics 数组 二分查找 
// 👍 69 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    /**
     * 当耗时limit满足条件时，那么limit + 1也可以。所以考虑用二分法找到最小满足条件的limit，重点就是check函数的设计。
     * 此题与经典极大极小化二分查找问题的区别在于每组可以任意删除一个元素，为了能够让最大值最小，显然每组中删去的一定是最大元素，
     * 所以在check函数中尝试分配时需要维护当前组的最大值，判断是否可以让每组删除最大值之后，总和都小于等于 limit。
     */
    public int minTime(int[] time,int m ){
        int n=time.length;
        //如果天数大于题目数量,每题分配到不同的天直接采用求助完成
        if(m>=n){
            return 0;
        }
        int l=0,r=Integer.MAX_VALUE;
        //二分模版
        while(l<=r){
            int mid=(l+r)/2;
            if(check(time,m,mid)){
                r=mid-1;
            }else {
                l=mid+1;
            }
        }
        return l;
    }

    private boolean check(int[] time, int m, int limit) {
        //当前遍历到的题目，当前的总耗时，最大耗时，需要的天数
        int cur=0,sum=0,max=0,day=1;
        while(cur<time.length){
            sum+=time[cur];
            max=Math.max(max,time[cur]);
            //总耗时减去组内的最大耗时仍然超出限制，则需要开启额外一天
            if(sum-max>limit){
                day++;
                //超出总天数,该方案否决
                if(day>m){
                    return false;
                }
                //sum和max更新为新组的值
                sum=time[cur];
                max=time[cur];
            }
            cur++;
        }
        //遍历完成则分配完成
        return true;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
