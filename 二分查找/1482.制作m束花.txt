//给你一个整数数组 bloomDay，以及两个整数 m 和 k 。 
//
// 现需要制作 m 束花。制作花束时，需要使用花园中 相邻的 k 朵花 。 
//
// 花园中有 n 朵花，第 i 朵花会在 bloomDay[i] 时盛开，恰好 可以用于 一束 花中。 
//
// 请你返回从花园中摘 m 束花需要等待的最少的天数。如果不能摘到 m 束花则返回 -1 。 
//
// 
//
// 示例 1： 
//
// 输入：bloomDay = [1,10,3,10,2], m = 3, k = 1
//输出：3
//解释：让我们一起观察这三天的花开过程，x 表示花开，而 _ 表示花还未开。
//现在需要制作 3 束花，每束只需要 1 朵。
//1 天后：[x, _, _, _, _]   // 只能制作 1 束花
//2 天后：[x, _, _, _, x]   // 只能制作 2 束花
//3 天后：[x, _, x, _, x]   // 可以制作 3 束花，答案为 3
// 
//
// 示例 2： 
//
// 输入：bloomDay = [1,10,3,10,2], m = 3, k = 2
//输出：-1
//解释：要制作 3 束花，每束需要 2 朵花，也就是一共需要 6 朵花。而花园中只有 5 朵花，无法满足制作要求，返回 -1 。
// 
//
// 示例 3： 
//
// 输入：bloomDay = [7,7,7,7,12,7,7], m = 2, k = 3
//输出：12
//解释：要制作 2 束花，每束需要 3 朵。
//花园在 7 天后和 12 天后的情况如下：
//7 天后：[x, x, x, x, _, x, x]
//可以用前 3 朵盛开的花制作第一束花。但不能使用后 3 朵盛开的花，因为它们不相邻。
//12 天后：[x, x, x, x, x, x, x]
//显然，我们可以用不同的方式制作两束花。
// 
//
// 示例 4： 
//
// 输入：bloomDay = [1000000000,1000000000], m = 1, k = 1
//输出：1000000000
//解释：需要等 1000000000 天才能采到花来制作花束
// 
//
// 示例 5： 
//
// 输入：bloomDay = [1,10,2,9,3,8,4,7,5,6], m = 4, k = 2
//输出：9
// 
//
// 
//
// 提示： 
//
// 
// bloomDay.length == n 
// 1 <= n <= 10^5 
// 1 <= bloomDay[i] <= 10^9 
// 1 <= m <= 10^6 
// 1 <= k <= n 
// 
// Related Topics 数组 二分查找 
// 👍 230 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    /**
     * 注意该题是变形的二分查找,需要找到二分模版所适用的地方，该类型题目不能直接将二分模版套用在题目所给的数组中
     * 需要自己推理，找到题目当中逻辑二分的区间,例如该题的区间就是天数,找到最小天数和最大天数进行二分即可
     * 还有该类的二分查找变形题目，都需要编写一个辅助函数进行判断（本题判断在mid天内是否可以完成m束花），判断后移动左右边界
     * @param bloomDay 花朵开放天数的数组
     * @param m m束花
     * @param k 一束花需要k朵花
     * @return 完成制作的最小天数
     */
    public int minDays(int[] bloomDay, int m, int k) {
        if (m > bloomDay.length / k) {
            return -1;
        }
        int minDay = bloomDay[0], maxDay = bloomDay[0];
        //查询数组中的最小天数和最大天数
        for (int i = 1; i < bloomDay.length; i++) {
            minDay = Math.min(minDay, bloomDay[i]);
            maxDay = Math.max(maxDay, bloomDay[i]);
        }
        //二分查找的是从最小天数到最大天数区间进行二分,而不是直接对bloomDay数组进行二分
        int l = minDay, r = maxDay;
        while (l <= r) {
            //mid就是需要制作的天数
            int mid = (r - l) / 2 + l;
            //如果当前可以完成,则二分的右边界缩减
            if (canMake(bloomDay, m, k, mid)) {
                r = mid - 1;
            } else {
                //如果当前不能完成则二分的左边界增加
                l = mid + 1;
            }
        }
        return l;
    }

    /**
     * 判断是否可以完成制作
     *
     * @param bloomDay 开花的时间数组
     * @param m        一共m束花
     * @param k        一束需要几朵花
     * @param days     天数
     * @return 是否可以完成
     */
    private boolean canMake(int[] bloomDay, int m, int k, int days) {
        int bouquets = 0;
        int flowers = 0;
        for (int i = 0; i < bloomDay.length && bouquets < m; i++) {
            if (bloomDay[i] <= days) {
                flowers++;
                if (flowers == k) {
                    bouquets++;
                    flowers = 0;
                }
            } else {
                flowers = 0;
            }
        }
        return bouquets >= m;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
