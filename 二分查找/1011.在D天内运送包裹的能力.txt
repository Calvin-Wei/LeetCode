//传送带上的包裹必须在 days 天内从一个港口运送到另一个港口。 
//
// 传送带上的第 i 个包裹的重量为 weights[i]。每一天，我们都会按给出重量（weights）的顺序往传送带上装载包裹。我们装载的重量不会超过船的最
//大运载重量。 
//
// 返回能在 days 天内将传送带上的所有包裹送达的船的最低运载能力。 
//
// 
//
// 示例 1： 
//
// 
//输入：weights = [1,2,3,4,5,6,7,8,9,10], days = 5
//输出：15
//解释：
//船舶最低载重 15 就能够在 5 天内送达所有包裹，如下所示：
//第 1 天：1, 2, 3, 4, 5
//第 2 天：6, 7
//第 3 天：8
//第 4 天：9
//第 5 天：10
//
//请注意，货物必须按照给定的顺序装运，因此使用载重能力为 14 的船舶并将包装分成 (2, 3, 4, 5), (1, 6, 7), (8), (9), (1
//0) 是不允许的。 
// 
//
// 示例 2： 
//
// 
//输入：weights = [3,2,2,4,1,4], days = 3
//输出：6
//解释：
//船舶最低载重 6 就能够在 3 天内送达所有包裹，如下所示：
//第 1 天：3, 2
//第 2 天：2, 4
//第 3 天：1, 4
// 
//
// 示例 3： 
//
// 
//输入：weights = [1,2,3,1,1], D = 4
//输出：3
//解释：
//第 1 天：1
//第 2 天：2
//第 3 天：3
//第 4 天：1, 1
// 
//
// 
//
// 提示： 
//
// 
// 1 <= days <= weights.length <= 5 * 104 
// 1 <= weights[i] <= 500 
// 
// Related Topics 贪心 数组 二分查找 
// 👍 417 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    /**
     * 该题目也是二分的变形题,本题的二分模版用在重量相关上,找到数组中的最大值和累计和确定二分的区间（最大值表示一个货物运一天的算法,累计和代表所有货物一天运完的算法）
     *
     * @param weights 货物顺序
     * @param days 所需天数
     * @return 船的运载量
     */
    public int shipWithinDays(int[] weights, int days) {
        int sum=0,max=0;
        for(int weight:weights){
            sum+=weight;
            max=Math.max(weight,max);
        }
        int l=max,r=sum;
        while(l<=r){
            int mid=(r-l)/2+l;
            if(canLoad(weights,days,mid)){
                r=mid-1;
            }else {
                l=mid+1;
            }
        }
        return l;
    }

    /**
     * 辅助函数,校验使用现在船载量能否在规定天数内运完
     * @param weights 货物重量
     * @param days 规定天数
     * @param load 当前的船载量
     * @return 能否运完
     */
    private boolean canLoad(int[] weights, int days, int load) {
        //天数默认为1天
        int curDays=1;
        //当前运载货物重量
        int curLoad=0;
        for(int i=0;i<weights.length && curDays<=days;i++){
            //如果当前载运量+货物重量>船载量，则证明该货物需要额外一天运载,则curLoad置为超出的货物重量,天数增加
            if(curLoad + weights[i] > load){
                curLoad=weights[i];
                curDays++;
            }else {
                curLoad+=weights[i];
            }
        }
        return curDays<=days;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
