//设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：val 和 next。val 是当前节点的值，next 是指向下一个节点的指针
///引用。如果要使用双向链表，则还需要一个属性 prev 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。 
//
// 在链表类中实现这些功能： 
//
// 
// get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。 
// addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。 
// addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。 
// addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val 的节点。如果 index 等于链表的长度，则该节点将附加
//到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。 
// deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。 
// 
//
// 
//
// 示例： 
//
// MyLinkedList linkedList = new MyLinkedList();
//linkedList.addAtHead(1);
//linkedList.addAtTail(3);
//linkedList.addAtIndex(1,2);   //链表变为1-> 2-> 3
//linkedList.get(1);            //返回2
//linkedList.deleteAtIndex(1);  //现在链表是1-> 3
//linkedList.get(1);            //返回3
// 
//
// 
//
// 提示： 
//
// 
// 所有val值都在 [1, 1000] 之内。 
// 操作次数将在 [1, 1000] 之内。 
// 请不要使用内置的 LinkedList 库。 
// 
// Related Topics 设计 链表 👍 351 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
class MyLinkedList {
    // 结点类
    class Node {
        // 结点的值
        int val;
        // 指向下一个结点的指针(java中表现为下一个结点的引用)
        Node next;
        // 初始化 数据域val
        Node(int val) {
            this.val = val;
        }
    }

    // 记录头结点/指针
    Node head;
    // 记录链表的长度(元素的个数)
    int N;

    // 初始化  构造方法
    public MyLinkedList() {
        // 初始化长度
        N = 0;
        // 初始化头结点
        head = null;
    }

    // 获取指定 索引index 的结点
    // 注意点: 判断index的合法性(index<0 或 index>=N都是不合法的)
    public int get(int index) {
        // 如果index<0 或 index>=N
        if (index<0 || index>=N) {
            // 则返回-1
            return -1;
        }
        // 创建一个head的临时结点
        Node temp = head;
        // 通过循环,从头结点开始往后找,依次找i次,就可以找到对应的元素
        for (int i=0; i<index; i++) {
            temp = temp.next;
        }
        // 返回获取到的元素
        return temp.val;
    }

    // 头部插入
    public void addAtHead(int val) {
        // 创建一个新结点,保存 元素val
        Node temp = new Node(val);
        // 把 新结点的next指针 指向 原来的头结点
        temp.next = head;
        // 把新结点变为头结点
        head = temp;
        // 元素的个数+1
        N++;
    }

    // 尾部插入
    public void addAtTail(int val) {
        // 如果元素个数为0
        if (N == 0) {
            // 新元素成为头结点
            head = new Node(val);
            // 把头结点的next 指针 指向 null
            head.next = null;
        } else {
            // 创建一个head的临时结点
            Node temp = head;
            // 要找当前最后一个结点
            // 当结点的next 为null,表明找到尾结点
            while (temp.next != null) {
                temp = temp.next;
            }
            // 创建一个新结点,保存 元素val
            Node tail = new Node(val);
            // 作为即将要插入到最后(最后一个节点),不指向任何结点(指向null)
            tail.next = null;
            // 让当前最后一个结点的next 指向 新结点tail
            temp.next = tail;
        }
        // 元素的个数+1
        N++;
    }

    // 任意插入
    /* 注意点:
        ①判断index的值(小于等于0,采用头插法; 等于元素个数,采用尾插法)
        ②插入新的结点(先绑后面 再绑前面)
    */
    public void addAtIndex(int index, int val) {
        // 如果 输入的值index 大于 元素个数N
        if (index > N) {
            // 则结点将不会被插入
            return;
        }
        // 如果 输入的值index 小于等于 0
        if (index <= 0){
            // 则调用头插法
            addAtHead(val);
            // 这个return非常重要 要不然程序不会结束
            return;
        }
        // 如果 输入的值index 等于 元素个数N
        if (index == N) {
            // 则调用尾插法
            addAtTail(val);
            // 这个return非常重要 要不然程序不会结束
            return;
        }
        // 创建一个head的临时结点
        Node temp = head;
        // 找到要插入结点的前驱
        // 寻找 索引index 之前的结点
        for (int i=0; i<index-1; i++) {
            temp = temp.next;
        }
        // 构建新的结点,让新的结点指向 索引index的结点
        Node addNode = new Node(val);
        // 新结点的next指针 指向 索引index的结点
        addNode.next = temp.next;
        // 让 索引index前驱的next指针 指向 新结点
        temp.next = addNode;
        // 元素的个数+1
        N++;
    }

    // 删除
    public void deleteAtIndex(int index) {
        // 如果 索引index = 0
        if(index == 0){
            // 直接把head的后驱变成头结点
            head = head.next;
            // 元素个数-1
            N--;
            // 如果 索引index满足条件 (>0 与 <N)
        }else if(index > 0 && index < N){
            // 创建一个head的临时结点
            Node temp = head;
            // 寻找 索引index的前驱
            for(int i = 0; i < index - 1; i++) {
                temp = temp.next;
            }
            // 此时temp已经 变成 索引index的前驱;  temp后驱(temp.next) 变成 索引index; temp后驱的后驱(temp.next.next) 变成 索引i的后驱
            // 前驱的next指针 指向(链接) 索引index 的后驱[删除了 要删除的结点(索引i)]
            temp.next = temp.next.next;
            // 元素个数-1
            N--;
        }
    }
}

/**
 * MyLinkedList对象将被实例化并这样调用:
 * MyLinkedList obj = new MyLinkedList();
 * int param_1 = obj.get(index);
 * obj.addAtHead(val);
 * obj.addAtTail(val);
 * obj.addAtIndex(index,val);
 * obj.deleteAtIndex(index);
 */
//leetcode submit region end(Prohibit modification and deletion)
