//给你一个单链表的头节点 head ，请你判断该链表是否为回文链表。如果是，返回 true ；否则，返回 false 。 
//
// 
//
// 示例 1： 
//
// 
//输入：head = [1,2,2,1]
//输出：true
// 
//
// 示例 2： 
//
// 
//输入：head = [1,2]
//输出：false
// 
//
// 
//
// 提示： 
//
// 
// 链表中节点数目在范围[1, 105] 内 
// 0 <= Node.val <= 9 
// 
//
// 
//
// 进阶：你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？ 
// Related Topics 栈 递归 链表 双指针 
// 👍 1086 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        if(head==null || head.next==null){
            return false;
        }
        ListNode resultNode=head;
        Stack<Integer> stack=new Stack<>();
        while(resultNode!=null){
            stack.push(resultNode.val);
            resultNode=resultNode.next;
        }
        while(head!=null){
            if(head.val!=stack.pop()){
                return false;
            }
            head=head.next;
        }
        return true;
    }
}
//高效
public boolean isPalindrome(ListNode head) {
        if(head==null || head.next==null){
            return true;
        }
        ListNode n1=head;
        ListNode n2=head;
        //找到中间节点，然后将链表折半，左半部分和右半部分链表判断是否相同
        while(n2.next!=null && n2.next.next !=null){ //查找中间节点
            n1=n1.next;//中部
            n2=n2.next.next;//结尾
        }
        n2=n1.next;//右部分第一个节点
        n1.next=null;//左半部分 mid.next->null
        ListNode temp=null;
        //反转右半区链表
        while(n2!=null){//右半区第一个节点
            temp=n2.next;//n3 保存下一个节点
            n2.next=n1;//下一个反转节点
            n1=n2;//n1移动
            n2=temp;//n2移动
        }
        //左半区的第一个节点
        n2=head;
        //检查回文链表
        boolean res=true;
        while(n1!=null && n2!=null){
            if(n1.val != n2.val){
                res=false;
                break;
            }
            n1=n1.next;
            n2=n2.next;
        }
        return res;
    }
//leetcode submit region end(Prohibit modification and deletion)
