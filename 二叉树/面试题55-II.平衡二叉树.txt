输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。

 

示例 1:

给定二叉树 [3,9,20,null,null,15,7]

    3
   / \
  9  20
    /  \
   15   7
返回 true 。

示例 2:

给定二叉树 [1,2,2,3,3,null,null,4,4]

       1
      / \
     2   2
    / \
   3   3
  / \
 4   4
返回 false 。


---先序遍历+判断深度（从上到下）

isBalanced(root) 函数： 判断树 root 是否平衡

1.特例处理： 若树根节点 root 为空，则直接返回 truetrue ；
2.返回值： 所有子树都需要满足平衡树性质，因此以下三者使用与逻辑 \&\&&& 连接；
	abs(self.depth(root.left) - self.depth(root.right)) <= 1 ：判断 当前子树 是否是平衡树；
	self.isBalanced(root.left) ： 先序遍历递归，判断 当前子树的左子树 是否是平衡树；
	self.isBalanced(root.right) ： 先序遍历递归，判断 当前子树的右子树 是否是平衡树；
	
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isBalanced(TreeNode root) {
		if (root == null)
			return true;
		int maxLeftDepth = searchMaxBalanced(root.left);
		int maxRightDepth = searchMaxBalanced(root.right);
		return Math.abs(maxLeftDepth - maxRightDepth) <= 1 && isBalanced(root.left) && isBalanced(root.right);
	}

	private int searchMaxBalanced(TreeNode node) {
		if (node == null)
			return 0;
		return Math.max(searchMaxBalanced(node.left), searchMaxBalanced(node.right)) + 1;
	}
}	