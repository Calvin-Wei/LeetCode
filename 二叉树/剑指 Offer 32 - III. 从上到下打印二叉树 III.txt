//请实现一个函数按照之字形顺序打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右到左的顺序打印，第三行再按照从左到右的顺序打印，其他行以此类推。 
//
// 
//
// 例如: 
//给定二叉树: [3,9,20,null,null,15,7], 
//
//     3
//   / \
//  9  20
//    /  \
//   15   7
// 
//
// 返回其层次遍历结果： 
//
// [
//  [3],
//  [20,9],
//  [15,7]
//]
// 
//
// 
//
// 提示： 
//
// 
// 节点总数 <= 1000 
// 
// Related Topics 树 广度优先搜索 二叉树 👍 181 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> resultList=new ArrayList<>();
        if(root==null){
            return resultList;
        }
        Deque<TreeNode> deque=new LinkedList<>();
        int depth=1;
        deque.offer(root);
        while(!deque.isEmpty()){
            LinkedList<Integer> currentList=new LinkedList<>();
            int currentSize=deque.size();
            for(int i=0;i<currentSize;i++){
                TreeNode cur=deque.poll();
                if(depth%2==1){
                    currentList.addLast(cur.val);
                }else {
                    currentList.addFirst(cur.val);
                }
                if(cur.left!=null){
                    deque.offer(cur.left);
                }
                if(cur.right!=null){
                    deque.offer(cur.right);
                }
            }
            depth++;
            resultList.add(currentList);
        }
        return resultList;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
