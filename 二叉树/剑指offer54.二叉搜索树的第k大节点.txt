给定一棵二叉搜索树，请找出其中第k大的节点。

 

示例 1:

输入: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
输出: 4
示例 2:

输入: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
输出: 4
 

限制：

1 ≤ k ≤ 二叉搜索树元素个数

1.执行时间极慢，仅超过5%
class Solution {
    List<Integer> list = new ArrayList<>();

	public int kthLargest(TreeNode root, int k) {
		list.add(root.val);
		getSubTree(root.left);
		getSubTree(root.right);
		//倒序排列list
		Collections.sort(list, new Comparator<Integer>() {

			@Override
			public int compare(Integer o1, Integer o2) {
				if(o1<o2)
					return 1;
				return -1;
			}
		});
		return list.get(k-1);
	}

	private void getSubTree(TreeNode node) {
		if (node != null) {
			list.add(node.val);
			getSubTree(node.left);
			getSubTree(node.right);
		}
	}
}

2.中序遍历的倒序+提前返回
一、终止条件： 当节点 root 为空（越过叶节点），则直接返回；
二、递归右子树： 即 dfs(root.right)；
三、遍历到第k个节点的三项工作：
	(1)提前返回： 若 k = 0 ，代表已找到目标节点，无需继续遍历，因此直接返回；
	(2)统计序号： 执行 k = k - 1（即从 k 减至 0 ）；
	(3)记录结果： 若 k = 0，代表当前节点为第 k 大的节点，因此记录 res = root.val；
四、递归左子树： 即 dfs(root.left)；


class Solution {
    int res, k;//k为0时，res就是第k大的节点
    public int kthLargest(TreeNode root, int k) {
        this.k = k;
        dfs(root);
        return res;
    }
    void dfs(TreeNode root) {//中序遍历的倒序
        if(root == null) return;
        dfs(root.right); //右子树
        if(k == 0) return;
        if(--k == 0) res = root.val; //递减k并判断
        dfs(root.left);//左子树
    }
}
