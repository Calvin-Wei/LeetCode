//给你一个二叉搜索树的根节点 root ，返回 树中任意两不同节点值之间的最小差值 。 
//
// 差值是一个正数，其数值等于两值之差的绝对值。 
//
// 
//
// 
// 
// 示例 1： 
//
// 
//输入：root = [4,2,6,1,3]
//输出：1
// 
//
// 示例 2： 
//
// 
//输入：root = [1,0,48,null,null,12,49]
//输出：1
// 
//
// 
//
// 提示： 
//
// 
// 树中节点的数目范围是 [2, 100] 
// 0 <= Node.val <= 10⁵ 
// 
//
// 
//
// 注意：本题与 530：https://leetcode-cn.com/problems/minimum-absolute-difference-in-
//bst/ 相同 
// 
// 
// Related Topics 树 深度优先搜索 广度优先搜索 二叉搜索树 二叉树 👍 212 👎 0


//leetcode submit region begin(Prohibit modification and deletion)

import com.wfkj.hobby.content.draw.TreeNode;

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int result=Integer.MAX_VALUE;
    //存放前一个节点的值
    int pre=-1;
    public int minDiffInBST(TreeNode root) {
        inorder(root);
        return result;
    }

    /**
     * 中序遍历
     */
    public void inorder(TreeNode root){
        if(root==null){
            return;
        }
        inorder(root.left);
        if (pre != -1) {
            result = Math.min(result, root.val - pre);
        }
        pre=root.val;
        inorder(root.right);
    }
}
//leetcode submit region end(Prohibit modification and deletion)
