//给你二叉树的根节点 root ，返回其节点值的 锯齿形层序遍历 。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。 
//
// 
//
// 示例 1： 
//
// 
//输入：root = [3,9,20,null,null,15,7]
//输出：[[3],[20,9],[15,7]]
// 
//
// 示例 2： 
//
// 
//输入：root = [1]
//输出：[[1]]
// 
//
// 示例 3： 
//
// 
//输入：root = []
//输出：[]
// 
//
// 
//
// 提示： 
//
// 
// 树中节点数目在范围 [0, 2000] 内 
// -100 <= Node.val <= 100 
// 
// Related Topics 树 广度优先搜索 二叉树 👍 595 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> resultList=new ArrayList<>();
        if(root==null){
            return resultList;
        }
        Deque<TreeNode> deque=new LinkedList<>();
        deque.offer(root);
        int depth=1;
        while(!deque.isEmpty()){
            int size=deque.size();
            LinkedList<Integer> list=new LinkedList<>();
            for(int i=0;i<size;i++){
                TreeNode cur=deque.poll();
                if(depth%2==1){
                    list.addLast(cur.val);
                }else {
                    list.addFirst(cur.val);
                }
                if(cur.left!=null){
                    deque.add(cur.left);
                }
                if(cur.right!=null){
                    deque.add(cur.right);
                }
            }
            depth++;
            resultList.add(list);
        }
        return resultList;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
