输入一棵二叉树的根节点，求该树的深度。从根节点到叶节点依次经过的节点（含根、叶节点）形成树的一条路径，最长路径的长度为树的深度。

例如：

给定二叉树 [3,9,20,null,null,15,7]，

    3
   / \
  9  20
    /  \
   15   7
返回它的最大深度 3 。

 

提示：

节点总数 <= 10000


1.双100解法
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
		if(root==null)
			return 0;
		if(root.left==null && root.right==null) {
			return 1;
		}
		int leftDepth=search(root.left,1);
		int rightDepth=search(root.right,1);
		return Math.max(leftDepth, rightDepth);
	}

	private int search(TreeNode node, int currentDepth) {
		if(node!=null) {
			currentDepth++;
			int leftDepth=currentDepth,rightDepth=currentDepth;
			if(node.left!=null) {
				leftDepth=search(node.left, currentDepth);				
			}
			if(node.right!=null) {
				rightDepth=search(node.right, currentDepth);
			}
			return Math.max(leftDepth, rightDepth);
		}else {
			return currentDepth;			
		}
	}
}

2.简便后序遍历
class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null) return 0;
        return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;
    }
}

3.简便层序遍历
循环遍历： 当 queue 为空时跳出。
初始化一个空列表 tmp ，用于临时存储下一层节点；
遍历队列： 遍历 queue 中的各节点 node ，并将其左子节点和右子节点加入 tmp；
更新队列： 执行 queue = tmp ，将下一层节点赋值给 queue；
统计层数： 执行 res += 1 ，代表层数加 11；


class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null) return 0;
        List<TreeNode> queue = new LinkedList<>() {{ add(root); }}, tmp;
        int res = 0;
        while(!queue.isEmpty()) {
            tmp = new LinkedList<>();
            for(TreeNode node : queue) {
                if(node.left != null) tmp.add(node.left);
                if(node.right != null) tmp.add(node.right);
            }
            queue = tmp;
            res++;
        }
        return res;
    }
}