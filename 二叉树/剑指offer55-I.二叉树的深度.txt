输入一棵二叉树的根节点，求该树的深度。从根节点到叶节点依次经过的节点（含根、叶节点）形成树的一条路径，最长路径的长度为树的深度。

例如：

给定二叉树 [3,9,20,null,null,15,7]，

    3
   / \
  9  20
    /  \
   15   7
返回它的最大深度 3 。

 

提示：

节点总数 <= 10000


1.双100解法
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
		if(root==null)
			return 0;
		if(root.left==null && root.right==null) {
			return 1;
		}
		int leftDepth=search(root.left,1);
		int rightDepth=search(root.right,1);
		return Math.max(leftDepth, rightDepth);
	}

	private int search(TreeNode node, int currentDepth) {
		if(node!=null) {
			currentDepth++;
			int leftDepth=currentDepth,rightDepth=currentDepth;
			if(node.left!=null) {
				leftDepth=search(node.left, currentDepth);				
			}
			if(node.right!=null) {
				rightDepth=search(node.right, currentDepth);
			}
			return Math.max(leftDepth, rightDepth);
		}else {
			return currentDepth;			
		}
	}
}