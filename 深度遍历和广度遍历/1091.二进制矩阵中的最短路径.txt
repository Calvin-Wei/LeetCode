//给你一个 n x n 的二进制矩阵 grid 中，返回矩阵中最短 畅通路径 的长度。如果不存在这样的路径，返回 -1 。 
//
// 二进制矩阵中的 畅通路径 是一条从 左上角 单元格（即，(0, 0)）到 右下角 单元格（即，(n - 1, n - 1)）的路径，该路径同时满足下述要求
//： 
//
// 
// 路径途经的所有单元格都的值都是 0 。 
// 路径中所有相邻的单元格应当在 8 个方向之一 上连通（即，相邻两单元之间彼此不同且共享一条边或者一个角）。 
// 
//
// 畅通路径的长度 是该路径途经的单元格总数。 
//
// 
//
// 示例 1： 
//
// 
//输入：grid = [[0,1],[1,0]]
//输出：2
// 
//
// 示例 2： 
//
// 
//输入：grid = [[0,0,0],[1,1,0],[1,1,0]]
//输出：4
// 
//
// 示例 3： 
//
// 
//输入：grid = [[1,0,0],[1,1,0],[1,1,0]]
//输出：-1
// 
//
// 
//
// 提示： 
//
// 
// n == grid.length 
// n == grid[i].length 
// 1 <= n <= 100 
// grid[i][j] 为 0 或 1 
// 
// Related Topics 广度优先搜索 数组 矩阵 👍 135 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    class Solution {
        public int shortestPathBinaryMatrix(int[][] grid) {
            if (grid[0][0] == 1)
                return -1;
            int res = 0, length = grid.length;
            LinkedList<int[]> queue = new LinkedList<>();
            //标识每个位置是否走过
            boolean[][] vis = new boolean[length][length];
            //8个方向
            int[][] direction = new int[][]{
                    {-1, -1}, {-1, 0}, {-1, 1}, {0, -1},
                    {0, 1}, {1, -1}, {1, 0}, {1, 1}
            };
            //左上角位置的坐标
            queue.offer(new int[]{0,0});
            vis[0][0]=true;
            while(!queue.isEmpty()){
                res++;
                int size=queue.size();
                //遍历每一层的所有节点
                for(int i=0;i<size;i++){
                    int[] item=queue.pollFirst();
                    //走到右下角的位置,则返回
                    if(item[0]==length-1 && item[1]==length-1){
                        return res;
                    }
                    for(int[] direct:direction){
                        //计算下一个位置的坐标
                        int x=item[0]+direct[0];
                        int y=item[1]+direct[1];
                        if(x>=0 && x<length && y>=0 && y<length && grid[x][y]==0 && !vis[x][y]){
                            queue.offer(new int[]{x,y});
                            vis[x][y]=true;
                        }
                    }
                }
            }
            return -1;
        }
    }
}
//leetcode submit region end(Prohibit modification and deletion)
