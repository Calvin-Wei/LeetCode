//给定一个二叉树 
//
// 
//struct Node {
//  int val;
//  Node *left;
//  Node *right;
//  Node *next;
//} 
//
// 填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。 
//
// 初始状态下，所有 next 指针都被设置为 NULL。 
//
// 
//
// 进阶： 
//
// 
// 你只能使用常量级额外空间。 
// 使用递归解题也符合要求，本题中递归程序占用的栈空间不算做额外的空间复杂度。 
// 
//
// 
//
// 示例： 
//
// 
//
// 
//输入：root = [1,2,3,4,5,null,7]
//输出：[1,#,2,3,#,4,5,7,#]
//解释：给定二叉树如图 A 所示，你的函数应该填充它的每个 next 指针，以指向其下一个右侧节点，如图 B 所示。序列化输出按层序遍历顺序（由 next 指
//针连接），'#' 表示每层的末尾。 
//
// 
//
// 提示： 
//
// 
// 树中的节点数小于 6000 
// -100 <= node.val <= 100 
// 
//
// 
//
// 
// 
// Related Topics 树 深度优先搜索 广度优先搜索 二叉树 👍 467 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/
//空间复杂度低
class Solution {
    public Node connect(Node root) {
        if(root==null){
            return null;
        }
        Node cur=root;
        while(cur!=null){
            //遍历当前层的时候，为了方便操作在下一层前面添加一个哑结点dummy,dummy.next就是下一层的链表
            // 注意这里是访问当前层的节点，然后把下一层的节点串起来
            Node dummy=new Node();
            //cur的下一层节点链表
            Node pre=dummy;
            while(cur!=null){
                //左子树不为空,就让pre节点的next指向他，也就是把它串起来作为一个链表
                if(cur.left!=null){
                    pre.next=cur.left;
                    pre=pre.next;
                }
                if(cur.right!=null){
                    pre.next=cur.right;
                    pre=pre.next;
                }
                //继续访问这一行的下一个节点
                cur=cur.next;
            }
            //dummy.next相当于当前层的下一层节点组成的链表
            cur=dummy.next;
        }
        return root;
    }
}

//效率较低
class Solution {
    public Node connect(Node root) {
        if(root==null)
            return null;
        Queue<Node> queue=new LinkedList<>();
        //先添加根节点
        queue.offer(root);
        while(!queue.isEmpty()){
            //当前层的节点数量
            int size= queue.size();
            //pre节点是当前层的链表
            Node pre=null;
            for(int i=0;i<size;i++){
                //挨个弹出当前层的节点
                Node cur=queue.poll();
                if(pre!=null){
                    pre.next=cur;
                }
                pre=cur;
                if(cur.left!=null){
                    queue.add(cur.left);
                }
                if(cur.right!=null){
                    queue.add(cur.right);
                }
            }
        }
        return root;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
