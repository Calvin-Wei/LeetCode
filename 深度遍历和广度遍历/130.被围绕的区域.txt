//给你一个 m x n 的矩阵 board ，由若干字符 'X' 和 'O' ，找到所有被 'X' 围绕的区域，并将这些区域里所有的 'O' 用 'X' 填充
//。
// 
// 
// 
//
// 示例 1： 
//
// 
//输入：board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O",
//"X","X"]]
//输出：[["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]
//解释：被围绕的区间不会存在于边界上，换句话说，任何边界上的 'O' 都不会被填充为 'X'。 任何不在边界上，或不与边界上的 'O' 相连的 'O' 最终都
//会被填充为 'X'。如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。
// 
//
// 示例 2： 
//
// 
//输入：board = [["X"]]
//输出：[["X"]]
// 
//
// 
//
// 提示： 
//
// 
// m == board.length 
// n == board[i].length 
// 1 <= m, n <= 200 
// board[i][j] 为 'X' 或 'O' 
// 
// 
// 
// Related Topics 深度优先搜索 广度优先搜索 并查集 数组 矩阵 👍 656 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
//深度优先遍历
class Solution {
    int row, column;
    public void solve(char[][] board) {
        row = board.length;
        if (row == 0) {
            return;
        }
        column = board[0].length;
        //先遍历四个边界的元素，将边界上O的元素改为A，第一列和最后一列
        for (int i = 0; i < row; i++) {
            dfs(board,i,0);
            dfs(board,i,column-1);
        }
        //先遍历四个边界的元素，将边界上O的元素改为A，第一列和最后一列
        for(int i=1;i<column;i++){
            dfs(board,0,i);
            dfs(board,row-1,i);
        }
        //遍历每个二维数组的每一个元素,遍历每一个元素将A改为O,然后中间没有被围绕的O改为X
        for(int i=0;i<row;i++){
            for(int j=0;j<column;j++){
                if(board[i][j]=='A'){
                    board[i][j]='O';
                }else if(board[i][j]=='O'){
                    board[i][j]='X';
                }

            }
        }
    }

    private void dfs(char[][] board, int x, int y) {
        if (x < 0 || y < 0 || x >= row || y >= column || board[x][y] != 'O') {
            return;
        }
        //所有的A需要被替换为X
        board[x][y] = 'A';
        dfs(board, x + 1, y);
        dfs(board, x - 1, y);
        dfs(board, x, y + 1);
        dfs(board, x, y - 1);
    }
}
//广度优先遍历
class Solution {
    int row, column;
    public void bfs(char[][] board) {
        row = board.length;
        if (row == 0) {
            return;
        }
        column = board[0].length;
        Queue<int[]> queue = new LinkedList<>();
        //第一列和最后一列
        for (int i = 0; i < row; i++) {
            queue.offer(new int[]{i, 0});
            queue.offer(new int[]{i, column - 1});
        }
        //第一行和最后一行
        for (int j = 1; j < column; j++) {
            queue.offer(new int[]{0, j});
            queue.offer(new int[]{row - 1, j});
        }
        //处理上下左右四条边
        while (!queue.isEmpty()) {
            int[] item = queue.poll();
            for (int[] direct : direction) {
                int x = item[0] + direct[0];
                int y = item[1] + direct[1];
                if (x < 0 || x >= row || y < 0 || y >= column || board[x][y] != 'O') {
                    continue;
                }
                if (board[x][y] == 'O') {
                    board[x][y] = 'X';
                }
            }
        }
        //从头到尾的遍历所有元素,边界上的A变为O,内部的O变为X
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < column; j++) {
                if (board[i][j] == 'A') {
                    board[i][j] = 'O';
                } else if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                }
            }
        }
    }
}

//leetcode submit region end(Prohibit modification and deletion)
