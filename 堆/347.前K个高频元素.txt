//给你一个整数数组 nums 和一个整数 k ，请你返回其中出现频率前 k 高的元素。你可以按 任意顺序 返回答案。 
//
// 
//
// 示例 1: 
//
// 
//输入: nums = [1,1,1,2,2,3], k = 2
//输出: [1,2]
// 
//
// 示例 2: 
//
// 
//输入: nums = [1], k = 1
//输出: [1] 
//
// 
//
// 提示： 
//
// 
// 1 <= nums.length <= 105 
// k 的取值范围是 [1, 数组中不相同的元素的个数] 
// 题目数据保证答案唯一，换句话说，数组中前 k 个高频元素的集合是唯一的 
// 
//
// 
//
// 进阶：你所设计算法的时间复杂度 必须 优于 O(n log n) ，其中 n 是数组大小。 
// Related Topics 数组 哈希表 分治 桶排序 计数 快速选择 排序 堆（优先队列） 
// 👍 1010 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public int[] topKFrequent(int[] nums,int k){
        //统计每个数字出现的次数
        Map<Integer,Integer> counter=IntStream.of(nums).boxed().collect(Collectors.toMap(e->e,e->1,Integer::sum));
        //大根堆从小到大排序
        Queue<Integer> maxHeap=new PriorityQueue<>(Comparator.comparingInt(counter::get));
        //遍历数组,维护一个k个大小的大根堆
        //不足k个直接加入堆中,否则判断堆中的最小次数是否小于当前数字的出现次数，若是，则删掉堆中出现次数最少的一个数字，将当前数字加入堆中
        counter.forEach((num,cnt)->{
            if(maxHeap.size()<k){
                maxHeap.offer(num);
            }else if (counter.get(maxHeap.peek())<cnt){
                maxHeap.poll();
                maxHeap.offer(num);
            }
        });
        int[] res=new int[k];
        int index=0;
        for(Integer num:maxHeap){
            res[index++]=num;
        }
        return res;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
