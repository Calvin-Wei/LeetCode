设计一个算法，找出数组中最小的k个数。以任意顺序返回这k个数均可。

示例：

输入： arr = [1,3,5,7,2,4,6,8], k = 4
输出： [1,2,3,4]
提示：

0 <= len(arr) <= 100000
0 <= k <= min(100000, len(arr))

1.执行时间超过73%
class Solution {
    public int[] smallestK(int[] arr, int k) {
        int array[]=new int[k];
        Arrays.sort(arr);
        for(int i=0;i<k;i++){
            array[i]=arr[i];
        }
        return array;
    }
}
1.大顶堆解法
public int[] smallestK(int[] arr, int k) {
        if (k == 0 || arr.length == 0) {
            return new int[0];
        }
        // 默认是小根堆，实现大根堆需要重写一下比较器。
        Queue<Integer> pq = new PriorityQueue<>((v1, v2) -> v2 - v1);
        for (int num: arr) {
            if (pq.size() < k) {
                //长度不够则添加
                pq.offer(num);
            } else if (num < pq.peek()) {
                //队列首个元素大则移除，并重新添加
                pq.poll();
                pq.offer(num);
            }
        }
        return  pq.stream().mapToInt(Integer::intValue).toArray();
    }