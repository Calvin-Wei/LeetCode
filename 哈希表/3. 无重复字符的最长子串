//给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。 
//
// 
//
// 示例 1: 
//
// 
//输入: s = "abcabcbb"
//输出: 3 
//解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
// 
//
// 示例 2: 
//
// 
//输入: s = "bbbbb"
//输出: 1
//解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
// 
//
// 示例 3: 
//
// 
//输入: s = "pwwkew"
//输出: 3
//解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
//     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。
// 
//
// 示例 4: 
//
// 
//输入: s = ""
//输出: 0
// 
//
// 
//
// 提示： 
//
// 
// 0 <= s.length <= 5 * 10⁴ 
// s 由英文字母、数字、符号和空格组成 
// 
// Related Topics 哈希表 字符串 滑动窗口 👍 6771 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public int lengthOfLongestSubstring(String s) {
        //key存放字符,value存放字符位置+1(加1表示从字符位置后一个才开始不重复)
        Map<Character, Integer> map = new HashMap<>();
        int len = s.length(), ans = 0;
        //不重复的字符串开始位置为start，结束位置为end，区间[start,end]
        for (int start = 0, end = 0; end < len; end++) {
            char c = s.charAt(end);
            //end不断遍历会遇到[start,end]区间内重复的字符情况，此时将字符作为key,获取其位置,并更新start区间,则新的[start,end]区间就不存在重复字符
            if (map.containsKey(c)) {
                start = Math.max(map.get(c), start);
            }
            //计算最大长度
            ans = Math.max(ans, end - start + 1);
            map.put(s.charAt(end), end + 1);
        }
        return ans;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
