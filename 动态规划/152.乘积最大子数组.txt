//给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。 
//
// 
//
// 示例 1: 
//
// 输入: [2,3,-2,4]
//输出: 6
//解释: 子数组 [2,3] 有最大乘积 6。
// 
//
// 示例 2: 
//
// 输入: [-2,0,-1]
//输出: 0
//解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。 
// Related Topics 数组 动态规划 
// 👍 1211 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public int maxProduct(int[] nums) {
        if(nums==null || nums.length==0){
            return 0;
        }
        int max=nums[0];
        int min=nums[0];
        int maxEnd;
        int minEnd;
        int result=nums[0];
        for(int i=1;i<nums.length;i++){
            //计算处于结尾时的最大乘积,例如3,4,5算到5的时候
            maxEnd=max*nums[i];
            //计算处于结尾时的最小乘积,负数的乘积,-2,3,-4算到-4的时候
            minEnd=min*nums[i];
            //可能仅是单个元素值,0,0,1000单个元素为最大累乘积
            max=Math.max(Math.max(maxEnd,minEnd),nums[i]);
            min=Math.min(Math.min(maxEnd,minEnd),nums[i]);
            result=Math.max(result,max);
        }
        return result;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
