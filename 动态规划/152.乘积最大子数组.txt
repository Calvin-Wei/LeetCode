//给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。 
//
// 
//
// 示例 1: 
//
// 输入: [2,3,-2,4]
//输出: 6
//解释: 子数组 [2,3] 有最大乘积 6。
// 
//
// 示例 2: 
//
// 输入: [-2,0,-1]
//输出: 0
//解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。 
// Related Topics 数组 动态规划 
// 👍 1396 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public int maxProduct(int[] nums) {
        //imax代表i位置之前的最大连续乘积,imin代表i位置之前的最小连续乘积
        int max = Integer.MIN_VALUE, imax = 1, imin = 1;
        for(int i:nums){
            //当遇到负数时,最大值和最小值进行互换,互换后重新计算最大值和最小值
            if(i<0){
                int tmp=imax;
                imax=imin;
                imin=tmp;
            }
            //最大值公式:nums[i]*imax,nums[i]
            imax=Math.max(i*imax,i);
            //最小值公式:nums[i]*imin,nums[i]
            imin=Math.min(i*imin,i);
            max=Math.max(max,imax);
        }
        return max;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
