//给你一个 只包含正整数 的 非空 数组 nums 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。 
//
// 
//
// 示例 1： 
//
// 
//输入：nums = [1,5,11,5]
//输出：true
//解释：数组可以分割成 [1, 5, 5] 和 [11] 。 
//
// 示例 2： 
//
// 
//输入：nums = [1,2,3,5]
//输出：false
//解释：数组不能分割成两个元素和相等的子集。
// 
//
// 
//
// 提示： 
//
// 
// 1 <= nums.length <= 200 
// 1 <= nums[i] <= 100 
// 
// Related Topics 数组 动态规划 👍 1373 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public boolean canPartition(int[] nums) {
        int len = nums.length;
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        //特例情况奇数不符合要求
        if ((sum & 1) == 1) {
            return false;
        }
        //中间位置就是背包重量
        int target = sum / 2;
        //状态转移方程:
        //不选择当前物品nums[i]存放,如果在[0,i-1]这个子区间内有一部分元素使得和为j那么,dp[j]=dp[j]
        //选择当前物品nums[i]存放,如果在[0,i-1]这个子区间内找到一部分元素使得他们的和为j-nums[i],dp[j]=dp[j-nums[i]]
        boolean[] dp = new boolean[target + 1];
        dp[0] = true;
        //第一个数如果小于背包重量则正好装下为true
        if (nums[0] <= target) {
            dp[nums[0]] = true;
        }
        for (int i = 1; i < len; i++) {
            for (int j = target; nums[i] <= j; j--) {
                if (dp[target]) {
                    return true;
                }
                dp[j] = dp[j] || dp[j - nums[i]];
            }
        }
        return dp[target];
    }
}
//leetcode submit region end(Prohibit modification and deletion)
