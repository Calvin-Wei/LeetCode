//给你一个非负整数数组 nums ，你最初位于数组的第一个位置。 
//
// 数组中的每个元素代表你在该位置可以跳跃的最大长度。 
//
// 你的目标是使用最少的跳跃次数到达数组的最后一个位置。 
//
// 假设你总是可以到达数组的最后一个位置。 
//
// 
//
// 示例 1: 
//
// 
//输入: nums = [2,3,1,1,4]
//输出: 2
//解释: 跳到最后一个位置的最小跳跃数是 2。
//     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。
// 
//
// 示例 2: 
//
// 
//输入: nums = [2,3,0,1,4]
//输出: 2
// 
//
// 
//
// 提示: 
//
// 
// 1 <= nums.length <= 10⁴ 
// 0 <= nums[i] <= 1000 
// 
// Related Topics 贪心 数组 动态规划 👍 1294 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
//反向查找o(n^2)
class Solution {
    public int jump(int[] nums) {
        //反向查找,先移动到最右侧最后位置
        // 然后从左到右依次判断从每个位置出发能否跳转到最右侧的位置,如果可以到达,则弹出第一次到达的计算步数
        int rightPos = nums.length-1;
        int step = 0;
        while(rightPos > 0){
            //嵌套循环,每次循环查找的位置是rightPos前一次跳转的位置(也就是最左侧可以直接跳转到rightPos的位置)
            for (int i = 0; i < nums.length; i++) {
                if (rightPos <= i + nums[i]) {
                    step++;
                    //从右往左移动,前一次跳转的位置
                    rightPos = i;
                    break;
                }
            }
        }
        return step;
    }
}
//时间复杂度O(n)
class Solution {
    public int jump(int[] nums) {
        //end代表这一次跳跃的位置
        int rightPos = 0, end = 0;
        int step = 0;
        //从左到右进行跳跃,计算出跳跃的最合适的最大路径则step+1
        for (int i = 0; i < nums.length - 1; i++) {
            rightPos=Math.max(i+nums[i],rightPos);
            //将end的值变为下一次跳跃的值,然后step+1
            if(i==end){
                end=rightPos;
                step++;
            }
        }
        return step;
    }
}   
//leetcode submit region end(Prohibit modification and deletion)
