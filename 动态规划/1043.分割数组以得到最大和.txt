//给你一个整数数组 arr，请你将该数组分隔为长度最多为 k 的一些（连续）子数组。分隔完成后，每个子数组的中的所有值都会变为该子数组中的最大值。 
//
// 返回将数组分隔变换后能够得到的元素最大和。 
//
// 
//
// 注意，原数组和分隔后的数组对应顺序应当一致，也就是说，你只能选择分隔数组的位置而不能调整数组中的顺序。 
//
// 
//
// 示例 1： 
//
// 
//输入：arr = [1,15,7,9,2,5,10], k = 3
//输出：84
//解释：
//因为 k=3 可以分隔成 [1,15,7] [9] [2,5,10]，结果为 [15,15,15,9,10,10,10]，和为 84，是该数组所有分隔变换后
//元素总和最大的。
//若是分隔成 [1] [15,7,9] [2,5,10]，结果就是 [1, 15, 15, 15, 10, 10, 10] 但这种分隔方式的元素总和（76）小
//于上一种。 
//
// 示例 2： 
//
// 
//输入：arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4
//输出：83
// 
//
// 示例 3： 
//
// 
//输入：arr = [1], k = 1
//输出：1
// 
//
// 
//
// 提示： 
//
// 
// 1 <= arr.length <= 500 
// 0 <= arr[i] <= 109 
// 1 <= k <= arr.length 
// 
// Related Topics 数组 动态规划 
// 👍 130 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
//执行效率高
class Solution {
    public int maxSumAfterPartitioning(int[] arr, int k) {
        int length = arr.length;
        int[] dp = new int[length + 1];
        //i指针是从左到右开始遍历整个数组
        for (int i = 0; i <= length; i++) {
            //j指针是前i-1个数组从右到左
            int j = i - 1;
            int max = dp[i];
            //i-j就是两个指针中间需要计算的,i-j范围内的最大值*(i-j)+前j个元素的最大和,与dp[i]进行比大小,则为dp[i]的最大值
            //转移方程：dp[i]=max(dp[i],dp[j]+(i-j)*MAX),max是局部子数组的最大值
            while ((i - j) <= k && j >= 0) {
                max = Math.max(max, arr[j]);
                dp[i] = Math.max(dp[i], dp[j] + max * (i - j));
                j--;
            }
        }
        return dp[length];
    }
}


class Solution {
    public int maxSumAfterPartitioning(int[] arr, int k) {
        //dp数组表示前i个元素，分割为长度小于等于k数组的元素最大和
        int[] dp = new int[arr.length];
        for (int i = 1; i <= k; i++) {
            dp[i-1]=getMaxValue(arr,0,i-1)*i;
        }
        for (int i=k;i<arr.length;i++){
            //dp[n]=max(dp[n-1]+max(arr[n])*1, dp[n-2]+max(arr[n], arr[n-1])*2, ... , dp[n-k]+max(arr[n], arr[n-k+1])*k);
            //这里我们可以用个循环实现
            //for i in range(1,k):
            //dp[n] = max(dp[n], dp[n-i]+max(arr[n], arr[n-i+1])*i);
            for (int j=1;j<=k;j++){
                dp[i]=Math.max(dp[i-j]+getMaxValue(arr,i-j+1,i)*j,dp[i]);
            }
        }
        return dp[arr.length-1];
    }

    private int getMaxValue(int[] arr, int start,int end) {
        int res=0;
        for(int i=start;i<=end;i++){
            res=Math.max(res,arr[i]);
        }
        return res;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
