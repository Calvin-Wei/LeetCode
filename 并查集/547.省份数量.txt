//
// 
// 有 n 个城市，其中一些彼此相连，另一些没有相连。如果城市 a 与城市 b 直接相连，且城市 b 与城市 c 直接相连，那么城市 a 与城市 c 间接相连
//。 
//
// 省份 是一组直接或间接相连的城市，组内不含其他没有相连的城市。 
//
// 给你一个 n x n 的矩阵 isConnected ，其中 isConnected[i][j] = 1 表示第 i 个城市和第 j 个城市直接相连，而 
//isConnected[i][j] = 0 表示二者不直接相连。 
//
// 返回矩阵中 省份 的数量。 
//
// 
//
// 示例 1： 
//
// 
//输入：isConnected = [[1,1,0],[1,1,0],[0,0,1]]
//输出：2
// 
//
// 示例 2： 
//
// 
//输入：isConnected = [[1,0,0],[0,1,0],[0,0,1]]
//输出：3
// 
//
// 
//
// 提示： 
//
// 
// 1 <= n <= 200 
// n == isConnected.length 
// n == isConnected[i].length 
// isConnected[i][j] 为 1 或 0 
// isConnected[i][i] == 1 
// isConnected[i][j] == isConnected[j][i] 
// 
// 
// 
// Related Topics 深度优先搜索 广度优先搜索 并查集 图 👍 713 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
class UnionFind {
    //并查集和树有些类似,只不过跟树相反,树中是每个节点会记录它的子节点,在并查集里,每个节点会记录它的父节点
    //key是当前节点,value是父节点
    private Map<Integer, Integer> father;
    //记录集合的数量
    private int numOfSets = 0;

    public UnionFind() {
        this.father = new HashMap<>();
        this.numOfSets = 0;
    }

    /**
     * 当新节点添加到并查集中，它的父节点应该为空
     */
    public void add(int x) {
        if (!father.containsKey(x)) {
            father.put(x, null);
            numOfSets++;
        }
    }

    /**
     * 如果两个节点是连通的（祖先相同），那么就需要把他们合并，谁当父节点是没有区别的
     */
    public void merge(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);
        if (rootX != rootY) {
            father.put(rootX, rootY);
            numOfSets--;
        }
    }

    /**
     * 查找祖先,父节点不为空则一直迭代
     */
    private int find(int x) {
        int root = x;
        while (father.get(root) != null) {
            root = father.get(root);
        }
        while (x != root) {
            int originalFather = father.get(x);
            father.put(x, root);
            x = originalFather;
        }
        return root;
    }

    /**
     * 两个节点是否相通,判断他们的祖先是否相同
     */
    public boolean isConnected(int x, int y) {
        return find(x) == find(y);
    }

    public int getNumOfSets() {
        return numOfSets;
    }

}
class Solution {
    public int findCircleNum(int[][] isConnected) {
        UnionFind uf=new UnionFind();
        for(int i=0;i<isConnected.length;i++){
            uf.add(i);
            for(int j=0;j<i;j++){
                if(isConnected[i][j]==1){
                    uf.merge(i,j);
                }
            }
        }
        return uf.getNumOfSets();
    }

}
//leetcode submit region end(Prohibit modification and deletion)
