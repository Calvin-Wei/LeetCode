//树可以看成是一个连通且 无环 的 无向 图。 
//
// 给定往一棵 n 个节点 (节点值 1～n) 的树中添加一条边后的图。添加的边的两个顶点包含在 1 到 n 中间，且这条附加的边不属于树中已存在的边。图的信
//息记录于长度为 n 的二维数组 edges ，edges[i] = [ai, bi] 表示图中在 ai 和 bi 之间存在一条边。 
//
// 请找出一条可以删去的边，删除后可使得剩余部分是一个有着 n 个节点的树。如果有多个答案，则返回数组 edges 中最后出现的边。 
//
// 
//
// 示例 1： 
//
// 
//
// 
//输入: edges = [[1,2], [1,3], [2,3]]
//输出: [2,3]
// 
//
// 示例 2： 
//
// 
//
// 
//输入: edges = [[1,2], [2,3], [3,4], [1,4], [1,5]]
//输出: [1,4]
// 
//
// 
//
// 提示: 
//
// 
// n == edges.length 
// 3 <= n <= 1000 
// edges[i].length == 2 
// 1 <= ai < bi <= edges.length 
// ai != bi 
// edges 中无重复元素 
// 给定的图是连通的 
// 
// Related Topics 深度优先搜索 广度优先搜索 并查集 图 👍 430 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public int[] findRedundantConnection(int[][] edges) {
        int N = edges.length; //有题目可知边的个数为N，元素在1-N之间
        int[] leader = new int[N+1]; //创建一个领导表，表示每个节点的上级领导
        int[] res = new int [2] ;
        // 初始化领导表 ： 每个节点的上级领导是自身（此时每个节点都是掌门）
        for(int i = 0 ; i <= N ; i++){
            leader[i] = i;
        }
        // 遍历每一条边 ： 将边上的两个节点所在门派合并
        for(int[] edge : edges){
            // 左节点的掌门 root0
            int root0 = findRoot(edge[0],leader);
            // 右节点的掌门 root1
            int root1 = findRoot(edge[1],leader);
            // 两个掌门不一样，则合并
            if(root0 != root1){
                // 谁是新掌门无关紧要，选一个就行
                leader[root0]  = root1;
            }else{ // 左右节点的掌门相同 ，这条边就是冗余的 ，无需合并
                return edge;
            }
        }
        return res;
    }

    // 找某个节点的掌门
    private int findRoot(int son , int[] leader){
        //冗余代码，方便理解
        int root = son;
        //只有掌门的领导是掌门自己
        while(root != leader[root]) root = leader[root];
        return root;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
